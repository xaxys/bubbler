package python

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"text/template"

	"github.com/xaxys/bubbler/definition"
	"github.com/xaxys/bubbler/generator/gen"
	"github.com/xaxys/bubbler/util"
)

type GeneratedType struct {
	GeneratedDef string
}

// ==================== Python Generator ====================

type PythonGenerator struct {
	*gen.GenDispatcher
	GenCtx   *gen.GenCtx
	GenTypes *util.OrderedMap[string, *GeneratedType]
	GenStack *util.OrderedMap[string, any]
	Warning  definition.TopLevelWarning
}

func NewPythonGenerator() *PythonGenerator {
	generator := &PythonGenerator{
		GenDispatcher: nil,
		GenTypes:      util.NewOrderedMap[string, *GeneratedType](),
		GenStack:      util.NewOrderedMap[string, any](),
		Warning:       nil,
	}
	generator.GenDispatcher = gen.NewGenDispatcher(generator)
	return generator
}

// ==================== Util ====================

func (g *PythonGenerator) generateDec(value any) string {
	return fmt.Sprintf("%d", value)
}

func (g *PythonGenerator) generateHex(value any) string {
	if g.GenCtx.GenOptions.DecimalNumber {
		return fmt.Sprintf("%d", value)
	}
	return fmt.Sprintf("0x%X", value)
}

func (g *PythonGenerator) generateBin(value any) string {
	if g.GenCtx.GenOptions.DecimalNumber {
		return fmt.Sprintf("%d", value)
	}
	return fmt.Sprintf("0b%b", value)
}

// ==================== Generate ====================

func (g *PythonGenerator) Generate(ctx *gen.GenCtx) (retErr error, retWarnings error) {
	g.GenCtx = ctx
	if ctx.GenOptions.SignExtMethod == gen.SignExtMethodShift {
		warn := &definition.GenerateWarning{
			Warning: &definition.OptionNotAvailableWarning{
				OptionName: "signext",
				Reason:     "Python target does not support sign extension method 'shift', default method will be used",
			},
		}
		g.Warning = definition.TopLevelWarningsJoin(g.Warning, warn)
	}
	if ctx.GenOptions.InnerClass {
		warn := &definition.GenerateWarning{
			Warning: &definition.OptionNotAvailableWarning{
				OptionName: "inner",
				Reason:     "Python target does not support inner class yet, this option will be ignored",
			},
		}
		g.Warning = definition.TopLevelWarningsJoin(g.Warning, warn)
	}
	var topErr definition.TopLevelError
	genErr := g.AcceptGenCtx(ctx)
	if genErr != nil {
		if _, ok := genErr.(definition.TopLevelError); !ok {
			genErr = &definition.GenerateError{
				Err: genErr,
			}
		}
		topErr = definition.TopLevelErrorsJoin(topErr, genErr.(definition.TopLevelError))
	}

	// generate single file
	if g.GenCtx.GenOptions.SingleFile {
		singleData := map[string]any{
			"GenTypes": g.GenTypes,
		}

		singleStr := util.ExecuteTemplate(fileTemplate, "singleFile", nil, singleData)
		err := g.GenCtx.WriteFile("", singleStr)
		if err != nil {
			topErr = definition.TopLevelErrorsJoin(topErr, &definition.GenerateError{
				Err: err,
			})
		}
	}

	return topErr, g.Warning
}

// ==================== GenerateUnit ====================

var fileTemplate = `
{{- define "file" -}}
# Target: Python
# Generated by bubbler
# DO NOT EDIT

import struct
from enum import Enum
from typing import List

{{ $curUnit := .Unit -}}
{{ range $unit := .Unit.LocalImports.Values -}}
from {{ $unit.Package.ToPath "." "_bb" }} import *
{{ end }}
{{ range $entry := .GenTypes.Entries -}}
{{- $type := $entry.Value -}}
# ====================== {{ $entry.Key }} ======================
{{ if $type.GeneratedDef }}
{{ $type.GeneratedDef }}
{{ end }}
# ==================== End {{ $entry.Key }} ====================

{{ end }}
{{- end -}}

{{- define "singleFile" -}}
# Target: Python (single file)
# Generated by bubbler
# DO NOT EDIT

import struct
from enum import Enum
from typing import List

{{ range $entry := .GenTypes.Entries -}}
{{- $type := $entry.Value -}}
# ====================== {{ $entry.Key }} ======================
{{ if $type.GeneratedDef }}
{{ $type.GeneratedDef }}
{{ end }}
# ==================== End {{ $entry.Key }} ====================

{{ end }}
{{- end -}}
`

func (g PythonGenerator) GenerateUnit(unit *definition.CompilationUnit) error {
	if unit.LocalTypes.Len() == 0 && gen.MatchOption(unit.Options, "omit_empty", true) {
		return nil
	}

	start := g.GenTypes.Len()

	for _, type_ := range unit.LocalTypes.Values() {
		_, err := g.GenerateType(type_)
		if err != nil {
			return err
		}
	}

	end := g.GenTypes.Len()

	// do not generate file if single file
	if g.GenCtx.GenOptions.SingleFile {
		return nil
	}

	genTypes := g.GenTypes.Sub(start, end)

	fileData := map[string]any{
		"Unit":     unit,
		"GenTypes": genTypes,
	}

	fileStr := util.ExecuteTemplate(fileTemplate, "file", nil, fileData)
	err := g.GenCtx.WritePackage(unit.Package, "_bb.py", fileStr)
	if err != nil {
		return err
	}

	return nil
}

// ==================== GenerateType ====================

func (g PythonGenerator) GenerateType(type_ definition.Type) (string, error) {
	return g.AcceptType(type_)
}

// ==================== GenerateTypeDefaultValue ====================

func (g PythonGenerator) GenerateTypeDefaultValue(type_ definition.Type) (string, error) {
	return g.AcceptTypeDefaultValue(type_)
}

// ==================== GenerateBasicType ====================

var typeMap = map[definition.TypeID]string{
	definition.TypeID_Bool:    "bool",
	definition.TypeID_Uint8:   "int",
	definition.TypeID_Uint16:  "int",
	definition.TypeID_Uint32:  "int",
	definition.TypeID_Uint64:  "int",
	definition.TypeID_Int8:    "int",
	definition.TypeID_Int16:   "int",
	definition.TypeID_Int32:   "int",
	definition.TypeID_Int64:   "int",
	definition.TypeID_Float32: "float",
	definition.TypeID_Float64: "float",
	definition.TypeID_String:  "str",
	definition.TypeID_Bytes:   "str",
}

func (g PythonGenerator) GenerateBasicType(type_ *definition.BasicType) (string, error) {
	if str, ok := typeMap[type_.TypeTypeID]; ok {
		return str, nil
	}
	return "", fmt.Errorf("unknown basic type: %s", type_.String())
}

// ==================== GenerateBasicTypeDefaultValue ====================

var typeDefValueMap = map[definition.TypeID]string{
	definition.TypeID_Bool:    "False",
	definition.TypeID_Uint8:   "0",
	definition.TypeID_Uint16:  "0",
	definition.TypeID_Uint32:  "0",
	definition.TypeID_Uint64:  "0",
	definition.TypeID_Int8:    "0",
	definition.TypeID_Int16:   "0",
	definition.TypeID_Int32:   "0",
	definition.TypeID_Int64:   "0",
	definition.TypeID_Float32: "0.0",
	definition.TypeID_Float64: "0.0",
}

func (g PythonGenerator) GenerateBasicTypeDefaultValue(type_ *definition.BasicType) (string, error) {
	if str, ok := typeDefValueMap[type_.TypeTypeID]; ok {
		return str, nil
	}
	return "", fmt.Errorf("unknown basic type: %s", type_.String())
}

// ==================== GenerateString ====================

func (g PythonGenerator) GenerateString(string_ *definition.String) (string, error) {
	return "str", nil
}

// ==================== GenerateStringDefaultValue ====================

func (g PythonGenerator) GenerateStringDefaultValue(string_ *definition.String) (string, error) {
	return `""`, nil
}

// ==================== GenerateBytes ====================

func (g PythonGenerator) GenerateBytes(bytes *definition.Bytes) (string, error) {
	return "str", nil
}

// ==================== GenerateBytesDefaultValue ====================

func (g PythonGenerator) GenerateBytesDefaultValue(bytes *definition.Bytes) (string, error) {
	return `""`, nil
}

// ==================== GenerateArray ====================

func (g PythonGenerator) GenerateArray(array *definition.Array) (string, error) {
	elemTy, err := g.GenerateType(array.ElementType)
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("List[%s]", elemTy), nil
}

// ==================== GenerateArrayDefaultValue ====================

func (g PythonGenerator) GenerateArrayDefaultValue(array *definition.Array) (string, error) {
	elemTyDef, err := g.GenerateTypeDefaultValue(array.ElementType)
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("[%s for i in range(%s)]", elemTyDef, g.generateDec(array.Length)), nil
}

// ==================== GenerateStruct ====================

var structTemplate = `
{{- define "field" -}}
    # {{ .Pos }} {{ .Field.GetFieldKind }}: {{ .Field }}
    {{- $fieldStrLen := len .FieldStr -}}
    {{- if gt $fieldStrLen 0 }}
        {{ .FieldStr }}
    {{- end }}
{{- end -}}

{{- define "structConst" -}}
    @staticmethod
    def size() -> int:
        return {{ .StructSize }}
{{ end }}

{{- define "structDef" -}}
{{- $structDef := .StructDef -}}
{{- $fieldStrs := .FieldStrs -}}
# Struct: {{ $structDef }}
class {{ $structDef.StructName }}:
    def __init__(self):
    {{- range $fieldStr := $fieldStrs }}
        {{ $fieldStr }}
    {{- end }}

    {{ .StructConstStr }}
    {{- range $methodStr := .MethodStrs }}
    {{ $methodStr }}
    {{- end }}
    {{ .EncoderStr }}

    {{ .DecoderStr }}

{{- end -}}

`

func (g PythonGenerator) GenerateStruct(structDef *definition.Struct) (string, error) {
	name := structDef.StructName
	// check if this struct is already generated
	if g.GenTypes.Has(structDef.StructName) {
		return name, nil
	}
	// check if this struct is in generating
	if g.GenStack.Has(structDef.StructName) {
		return name, nil
	}
	// push to stack
	g.GenStack.Put(structDef.StructName, nil)
	defer g.GenStack.Remove(structDef.StructName)

	genTy, err := g.generateStruct(structDef)
	if err != nil {
		return "", err
	}
	g.GenTypes.Put(structDef.StructName, genTy)

	return name, nil
}

func (g PythonGenerator) generateStruct(structDef *definition.Struct) (*GeneratedType, error) {
	fieldInitStrs := make([]string, structDef.StructFields.Len())
	if err := structDef.ForEachFieldWithPos(func(field definition.Field, index int, start int64, pos string) error {
		fieldStr, err := g.GenerateField(field)
		if err != nil {
			return err
		}

		fieldData := map[string]any{
			"Pos":      pos,
			"Field":    field,
			"FieldStr": fieldStr,
		}

		str := util.ExecuteTemplate(structTemplate, "field", nil, fieldData)
		fieldInitStrs[index] = str
		return nil
	}); err != nil {
		return nil, err
	}

	methodStrs := []string{}
	if err := structDef.ForEachField(func(field definition.Field, index int, start int64) error {
		if !field.GetFieldKind().IsNormal() {
			return nil
		}
		normalField := field.(*definition.NormalField)
		for _, group := range normalField.FieldMethods.Values() {
			for _, method := range group.Values() {
				methodStr, err := g.GenerateMethod(method)
				if err != nil {
					return err
				}
				methodStrs = append(methodStrs, methodStr)
			}
		}

		if !g.GenCtx.GenOptions.MinimalCode {
			rawGetterStr, err := g.GenerateRawGetter(field)
			if err != nil {
				return err
			}
			methodStrs = append(methodStrs, rawGetterStr)

			rawSetterStr, err := g.GenerateRawSetter(field)
			if err != nil {
				return err
			}
			methodStrs = append(methodStrs, rawSetterStr)
		}
		return nil
	}); err != nil {
		return nil, err
	}

	// TODO: handle dynamic size
	constData := map[string]any{
		"StructSize": structDef.StructBitSize / 8,
	}
	constStr := util.ExecuteTemplate(structTemplate, "structConst", nil, constData)

	encoderStr, err := g.GenerateEncoder(structDef)
	if err != nil {
		return nil, err
	}

	decoderStr, err := g.GenerateDecoder(structDef)
	if err != nil {
		return nil, err
	}

	defData := map[string]any{
		"StructDef":      structDef,
		"FieldStrs":      fieldInitStrs,
		"StructConstStr": constStr,
		"MethodStrs":     methodStrs,
		"EncoderStr":     encoderStr,
		"DecoderStr":     decoderStr,
	}

	defStr := util.ExecuteTemplate(structTemplate, "structDef", nil, defData)

	code := &GeneratedType{
		GeneratedDef: defStr,
	}
	return code, nil
}

// ==================== GenerateStructDefaultValue ====================

func (g PythonGenerator) GenerateStructDefaultValue(structDef *definition.Struct) (string, error) {
	return fmt.Sprintf("%s()", structDef.StructName), nil
}

// ==================== GenerateField ====================

func (g PythonGenerator) GenerateField(field definition.Field) (string, error) {
	return g.AcceptField(field)
}

// ==================== GenerateNormalField ====================

var normalFieldTemplate = `
{{- define "normalField" -}}
    {{- $field := .Field -}}
    {{- $fieldName := Tosnake_case .Field.FieldName -}}
    {{- $tyStr := GenerateType $field.FieldType -}}
	{{- $tyDefValue := GenerateTypeDefaultValue $field.FieldType -}}
    	self._{{ $fieldName }}: {{ $tyStr }} = {{ $tyDefValue }}
{{- end -}}
`

func (g PythonGenerator) GenerateNormalField(field *definition.NormalField) (string, error) {
	funcMap := template.FuncMap{
		"GenerateType":             g.GenerateType,
		"GenerateTypeDefaultValue": g.GenerateTypeDefaultValue,
	}

	fieldData := map[string]any{
		"Field": field,
	}

	fieldStr := util.ExecuteTemplate(normalFieldTemplate, "normalField", funcMap, fieldData)
	return fieldStr, nil
}

// ==================== GenerateVoidField ====================

func (g PythonGenerator) GenerateVoidField(field *definition.VoidField) (string, error) {
	return "", nil
}

// ==================== GenerateEmbeddedField ====================

func (g PythonGenerator) GenerateEmbeddedField(field *definition.EmbeddedField) (string, error) {
	return "", nil
}

// ==================== GenerateConstantField ====================

var constantFieldTemplate = `
{{- define "constantField" -}}
    {{- $field := .Field -}}
    {{- $fieldName := Tosnake_case .Field.FieldName -}}
    {{- $tyStr := GenerateType $field.FieldType -}}
    {{- $constValue := GenerateLiteral $field.FieldConstant -}}
        self._{{ $fieldName }}: {{ $tyStr }} = {{ $constValue }}
{{- end -}}
`

func (g PythonGenerator) GenerateConstantField(field *definition.ConstantField) (string, error) {
	literalGentor := NewPythonLiteralGenerator()

	funcMap := template.FuncMap{
		"GenerateType":    g.GenerateType,
		"GenerateLiteral": literalGentor.GenerateLiteral,
	}

	fieldData := map[string]any{
		"Field": field,
	}

	fieldStr := util.ExecuteTemplate(constantFieldTemplate, "constantField", funcMap, fieldData)
	return fieldStr, nil
}

// ==================== GenerateMethod ====================

func (g PythonGenerator) GenerateMethod(method definition.Method) (string, error) {
	return g.AcceptMethod(method)
}

// ==================== GenerateMethodDecl ====================

func (g PythonGenerator) GenerateMethodDecl(method definition.Method) (string, error) {
	return g.AcceptMethodDecl(method)
}

// ==================== GenerateDefaultGetterDecl ====================

func (g PythonGenerator) GenerateDefaultGetterDecl(method *definition.GetMethod) (string, error) {
	panic("not implemented")
}

// ==================== GenerateDefaultSetterDecl ====================

func (g PythonGenerator) GenerateDefaultSetterDecl(method *definition.SetMethod) (string, error) {
	panic("not implemented")
}

// ==================== GenerateCustomGetterDecl ====================

func (g PythonGenerator) GenerateCustomGetterDecl(method *definition.GetMethod) (string, error) {
	panic("not implemented")
}

// ==================== GenerateCustomSetterDecl ====================

func (g PythonGenerator) GenerateCustomSetterDecl(method *definition.SetMethod) (string, error) {
	panic("not implemented")
}

// ==================== GenerateRawGetterDecl ====================

func (g PythonGenerator) GenerateRawGetterDecl(field definition.Field) (string, error) {
	panic("not implemented")
}

// ==================== GenerateRawSetterDecl ====================

func (g PythonGenerator) GenerateRawSetterDecl(field definition.Field) (string, error) {
	panic("not implemented")
}

// ==================== GenerateDefaultGetter ====================

// TODO: support default getter

var defaultGetterTemplate = `
{{- define "defaultGetter" -}}
{{- $retTyStr := GenerateType .MethodDef.MethodRetType -}}
{{- $field := .MethodDef.MethodBelongs -}}
{{- $fieldName := Tosnake_case $field.FieldName -}}
{{- $valueStr := printf "self._%s" $fieldName -}}
{{- $exprStr := GenerateExpr .MethodDef.MethodExpr $valueStr -}}
    # DefaultGetter: {{ $fieldName }}
    @property
    def {{ $fieldName }}(self) -> {{ $returnType }}:
        return {{ $expr }}
{{ end -}}
`

func (g PythonGenerator) GenerateDefaultGetter(method *definition.GetMethod) (string, error) {
	funcMap := template.FuncMap{
		"GenerateType": g.GenerateType,
		"GenerateExpr": g.GenerateExpr,
	}

	fieldData := map[string]any{
		"MethodDef": method,
		"GenOption": g.GenCtx.GenOptions,
	}
	fieldStr := util.ExecuteTemplate(defaultGetterTemplate, "defaultGetter", funcMap, fieldData)
	return fieldStr, nil
}

// ==================== GenerateDefaultSetter ====================

// TODO: support default setter

var defaultSetterTemplate = `
{{- define "defaultSetter" -}}
{{- $paramTyStr := GenerateType .MethodDef.MethodParamType -}}
{{- $field := .MethodDef.MethodBelongs -}}
{{- $fieldName := Tosnake_case $field.FieldName -}}
{{- $exprStr := GenerateExpr .MethodDef.MethodExpr "value" -}}
    # DefaultSetter: {{ $fieldName }}
    @{{ $fieldName }}.setter
    def {{ $fieldName }}(self, value: {{ $paramTyStr }}) -> None:
        self._{{ $fieldName }} = {{ $exprStr }}
{{ end }}
`

func (g PythonGenerator) GenerateDefaultSetter(method *definition.SetMethod) (string, error) {
	funcMap := template.FuncMap{
		"GenerateType": g.GenerateType,
		"GenerateExpr": g.GenerateExpr,
	}

	fieldData := map[string]any{
		"MethodDef": method,
		"GenOption": g.GenCtx.GenOptions,
	}
	fieldStr := util.ExecuteTemplate(defaultSetterTemplate, "defaultSetter", funcMap, fieldData)
	return fieldStr, nil
}

// ==================== GenerateCustomGetter ====================

var customGetterTemplate = `
{{- define "customGetter" -}}
{{- $retTyStr := GenerateType .MethodDef.MethodRetType -}}
{{- $field := .MethodDef.MethodBelongs -}}
{{- $fieldName := Tosnake_case $field.FieldName -}}
{{- $methodName := Tosnake_case .MethodDef.MethodName -}}
{{- $valueStr := printf "self._%s" $fieldName -}}
{{- $exprStr := GenerateExpr .MethodDef.MethodExpr $valueStr -}}
    # CustomGetter: {{ $methodName }}
    @property
    def {{ $methodName }}(self) -> {{ $retTyStr }}:
        return {{ $exprStr }}
{{ end }}
`

func (g PythonGenerator) GenerateCustomGetter(method *definition.GetMethod) (string, error) {
	funcMap := template.FuncMap{
		"GenerateType": g.GenerateType,
		"GenerateExpr": g.GenerateExpr,
	}

	fieldData := map[string]any{
		"MethodDef": method,
		"GenOption": g.GenCtx.GenOptions,
	}
	fieldStr := util.ExecuteTemplate(customGetterTemplate, "customGetter", funcMap, fieldData)
	return fieldStr, nil
}

// ==================== GenerateCustomSetter ====================

var customSetterTemplate = `
{{- define "customSetter" -}}
{{- $paramTyStr := GenerateType .MethodDef.MethodParamType -}}
{{- $field := .MethodDef.MethodBelongs -}}
{{- $fieldName := Tosnake_case $field.FieldName -}}
{{- $methodName := Tosnake_case .MethodDef.MethodName -}}
{{- $exprStr := GenerateExpr .MethodDef.MethodExpr "value" -}}
{{- $methodGroup := .MethodDef.MethodBelongs.FieldMethods.MustGet .MethodDef.MethodName -}}
    # CustomSetter: {{ $methodName }}
    {{- if ne $methodGroup.Len 1 }}
    @{{ $methodName }}.setter
    {{- end }}
    def {{ $methodName }}(self, value: {{ $paramTyStr }}) -> None:
        self._{{ $fieldName }} = {{ $exprStr }}
    {{- if eq $methodGroup.Len 1 }}

    # Property to avoid undefined getter
    {{ $methodName }} = property(None, {{ $methodName }})
    {{- end }}
{{ end }}
`

func (g PythonGenerator) GenerateCustomSetter(method *definition.SetMethod) (string, error) {
	funcMap := template.FuncMap{
		"GenerateType": g.GenerateType,
		"GenerateExpr": g.GenerateExpr,
	}

	fieldData := map[string]any{
		"MethodDef": method,
		"GenOption": g.GenCtx.GenOptions,
	}
	fieldStr := util.ExecuteTemplate(customSetterTemplate, "customSetter", funcMap, fieldData)
	return fieldStr, nil
}

// ==================== GenerateRawGetter ====================

var rawGetterTemplate = `
{{- define "rawGetter" -}}
{{- $retTyStr := GenerateType .FieldDef.FieldType -}}
{{- $fieldName := Tosnake_case .FieldDef.FieldName -}}
    # RawGetter: {{ $fieldName }}
    @property
    def {{ $fieldName }}(self) -> {{ $retTyStr }}:
        return self._{{ $fieldName }}
{{ end }}
`

func (g PythonGenerator) GenerateRawGetter(field definition.Field) (string, error) {
	funcMap := template.FuncMap{
		"GenerateType": g.GenerateType,
	}

	fieldData := map[string]any{
		"FieldDef":  field,
		"GenOption": g.GenCtx.GenOptions,
	}
	fieldStr := util.ExecuteTemplate(rawGetterTemplate, "rawGetter", funcMap, fieldData)
	return fieldStr, nil
}

// ==================== GenerateRawSetter ====================

var rawSetterTemplate = `
{{- define "rawSetter" -}}
{{- $paramTyStr := GenerateType .FieldDef.FieldType -}}
{{- $fieldName := Tosnake_case .FieldDef.FieldName -}}
    # RawSetter: {{ $fieldName }}
    @{{ $fieldName }}.setter
    def {{ $fieldName }}(self, value: {{ $paramTyStr }}) -> None:
        self._{{ $fieldName }} = value
{{ end }}
`

func (g PythonGenerator) GenerateRawSetter(field definition.Field) (string, error) {
	funcMap := template.FuncMap{
		"GenerateType": g.GenerateType,
	}

	fieldData := map[string]any{
		"FieldDef":  field,
		"GenOption": g.GenCtx.GenOptions,
	}
	fieldStr := util.ExecuteTemplate(rawSetterTemplate, "rawSetter", funcMap, fieldData)
	return fieldStr, nil
}

// ==================== GenerateEnum ====================

func (g PythonGenerator) GenerateEnum(enumDef *definition.Enum) (string, error) {
	name := enumDef.EnumName
	// check if this enum is already generated
	if g.GenTypes.Has(enumDef.EnumName) {
		return name, nil
	}
	// check if this enum is in generating
	if g.GenStack.Has(enumDef.EnumName) {
		return name, nil
	}
	// push to stack
	g.GenStack.Put(enumDef.EnumName, nil)
	defer g.GenStack.Remove(enumDef.EnumName)

	genTy, err := g.generateEnum(enumDef)
	if err != nil {
		return "", err
	}
	g.GenTypes.Put(enumDef.EnumName, genTy)

	return name, nil
}

var enumTemplate = `
{{- define "enumDef" -}}
# Enum: {{ .EnumDef.ShortString }}
class {{ .EnumDef.EnumName }}(Enum):
{{- range .EnumDef.EnumValues.Values }}
    {{ .EnumValueName }} = {{ .EnumValue }}
{{- end }}

{{- end -}}
`

func (g PythonGenerator) generateEnum(enumDef *definition.Enum) (*GeneratedType, error) {
	enumDefData := map[string]any{
		"EnumDef": enumDef,
	}

	enumDefStr := util.ExecuteTemplate(enumTemplate, "enumDef", nil, enumDefData)

	code := &GeneratedType{
		GeneratedDef: enumDefStr,
	}

	return code, nil
}

// ==================== GenerateEnumDefaultValue ====================

func (g PythonGenerator) GenerateEnumDefaultValue(enumDef *definition.Enum) (string, error) {
	return "None", nil
}

// ==================== Encode/Decode Util ====================

var typeMapStructPackID = map[definition.TypeID]string{
	definition.TypeID_Bool:    "B",
	definition.TypeID_Uint8:   "B",
	definition.TypeID_Uint16:  "H",
	definition.TypeID_Uint32:  "I",
	definition.TypeID_Uint64:  "Q",
	definition.TypeID_Int8:    "b",
	definition.TypeID_Int16:   "h",
	definition.TypeID_Int32:   "i",
	definition.TypeID_Int64:   "q",
	definition.TypeID_Float32: "f",
	definition.TypeID_Float64: "d",
}

var typeSizeMapUint = map[int64]definition.TypeID{
	8:  definition.TypeID_Uint8,
	16: definition.TypeID_Uint16,
	32: definition.TypeID_Uint32,
	64: definition.TypeID_Uint64,
}

var typeSizeMapInt = map[int64]definition.TypeID{
	8:  definition.TypeID_Int8,
	16: definition.TypeID_Int16,
	32: definition.TypeID_Int32,
	64: definition.TypeID_Int64,
}

// ==================== GenerateEncoder ====================

var encoderTemplate = `
{{- define "encodeField" -}}
	# {{ .Pos }} {{ .Field.GetFieldKind }}: {{ .Field }}
    {{- range $encodeStmt := .EncodeStmts }}
        {{ $encodeStmt }}
    {{- end -}}
{{- end -}}

{{- define "encoder" -}}
{{- $structName := .StructDef.StructName -}}
    # Encoder: {{ $structName }}
    def encode(self) -> bytearray:
        data = bytearray({{ calc .StructDef.StructBitSize "/" 8 }})
        {{- range $encodeStr := .EncodeStrs }}
        {{ $encodeStr }}
        {{- end }}
        return data
{{- end -}}
`

func (g PythonGenerator) GenerateEncoder(structDef *definition.Struct) (string, error) {
	encodeStrs := []string{}
	if err := structDef.ForEachFieldWithPos(func(field definition.Field, fieldIndex int, startBits int64, pos string) error {
		encodeStmts, err := g.generateEncodeField(field, startBits)
		if err != nil {
			return err
		}
		// skip
		if len(encodeStmts) == 0 {
			return nil
		}
		// remove blank lines
		filteredEncodeStmts := []string{}
		for _, stmt := range encodeStmts {
			if stmt != "" {
				filteredEncodeStmts = append(filteredEncodeStmts, stmt)
			}
		}
		encodeStmts = filteredEncodeStmts

		encodeFieldData := map[string]any{
			"Pos":         pos,
			"Field":       field,
			"EncodeStmts": encodeStmts,
		}

		str := util.ExecuteTemplate(encoderTemplate, "encodeField", nil, encodeFieldData)
		encodeStrs = append(encodeStrs, str)
		return nil
	}); err != nil {
		return "", err
	}

	fieldData := map[string]any{
		"StructDef":  structDef,
		"EncodeStrs": encodeStrs,
		"GenOption":  g.GenCtx.GenOptions,
	}

	encoderStr := util.ExecuteTemplate(encoderTemplate, "encoder", nil, fieldData)
	return encoderStr, nil
}

// return multiple statements (lines) to encode a field
func (g PythonGenerator) generateEncodeField(field definition.Field, startBits int64) ([]string, error) {
	switch val := field.(type) {
	case *definition.ConstantField:
		return g.generateEncodeConstantField(val, startBits)
	case *definition.VoidField:
		return g.generateEncodeVoidField(val, startBits)
	case *definition.EmbeddedField:
		return g.generateEncodeEmbeddedField(val, startBits)
	case *definition.NormalField:
		return g.generateEncodeNormalField(val, startBits)
	default:
		return nil, fmt.Errorf("internal error: unknown field kind %T", val)
	}
}

var fieldEncoderTemplate = `
{{- define "encodeTempVarName" -}}
    temp_field_at_pos_{{ .StartBits }}
{{- end -}}

{{- define "encodeStructFieldName" -}}
    self._{{ .FieldName }}
{{- end -}}

{{- define "encodeNormalFieldStruct" -}}
    data[{{ .FromByte }}:{{ .ToByte }}] = {{ .FieldName }}.encode()
{{- end -}}

{{- define "encodeNormalFieldTempVarAssignEnum" -}}
    {{ .TempName }} = {{ .FieldName }}.value
{{- end -}}

{{- define "encodeNormalFieldTempVarAssignFloatCast" -}}
    {{ .TempName }} = struct.unpack('<{{ .TyUint }}', struct.pack('<{{ .TyFloat }}', {{ .FieldName }}))[0]
{{- end -}}

{{- define "encodeImpl" -}}
    data[{{ .BytePos }}] {{ .Operator }} {{ .FieldData }}
{{- end -}}
`

func (g PythonGenerator) generateEncodeTempVarName(startBits int64) string {
	encodeTempVarNameData := map[string]any{
		"StartBits": startBits,
	}

	return util.ExecuteTemplate(fieldEncoderTemplate, "encodeTempVarName", nil, encodeTempVarNameData)
}

func (g PythonGenerator) generateEncodeStructFieldName(name string) string {
	encodeStructFieldNameData := map[string]any{
		"FieldName": name,
	}

	return util.ExecuteTemplate(fieldEncoderTemplate, "encodeStructFieldName", nil, encodeStructFieldNameData)
}

func (g PythonGenerator) generateEncodeConstantField(field *definition.ConstantField, startBits int64) ([]string, error) {
	var byteOrder binary.ByteOrder = binary.LittleEndian
	if gen.MatchOption(field.FieldOptions, "order", "big") {
		byteOrder = binary.BigEndian
	}

	buffer := &bytes.Buffer{}
	value := field.FieldConstant.GetLiteralValueIn(field.FieldType.TypeTypeID)
	err := binary.Write(buffer, byteOrder, value)
	if err != nil {
		return nil, fmt.Errorf("internal error: %s", err)
	}

	data := buffer.Bytes()
	fieldData := func(i int64) string {
		return g.generateHex(data[i])
	}

	from := startBits
	to := startBits + field.GetFieldBitSize()

	encodeStmts := g.generateEncodeImpl(from, to, fieldData)
	return encodeStmts, nil
}

func (g PythonGenerator) generateEncodeVoidField(field *definition.VoidField, startBits int64) ([]string, error) {
	return []string{""}, nil
}

func (g PythonGenerator) generateEncodeEmbeddedField(field *definition.EmbeddedField, startBits int64) ([]string, error) {
	return nil, nil
}

func (g PythonGenerator) generateEncodeNormalField(field *definition.NormalField, startBits int64) ([]string, error) {
	from := startBits
	to := startBits + field.GetFieldBitSize()
	encodeStmts := []string{}

	switch ty := field.FieldType.(type) {
	case *definition.Struct, *definition.BasicType:
		name := g.generateEncodeStructFieldName(field.FieldName)
		stmts, err := g.generateEncodeNormalFieldImpl(name, ty, field.FieldOptions, from, to)
		if err != nil {
			return nil, err
		}
		encodeStmts = append(encodeStmts, stmts...)

	case *definition.Enum:
		tempName := g.generateEncodeTempVarName(startBits)
		// any integer type is ok
		tempTy := &definition.Uint64

		encodeNormalFieldTempVarAssignData := map[string]any{
			"TempName":  tempName,
			"FieldName": g.generateEncodeStructFieldName(field.FieldName),
		}
		declStr := util.ExecuteTemplate(fieldEncoderTemplate, "encodeNormalFieldTempVarAssignEnum", nil, encodeNormalFieldTempVarAssignData)
		encodeStmts = append(encodeStmts, declStr)

		stmts, err := g.generateEncodeNormalFieldImpl(tempName, tempTy, field.FieldOptions, from, to)
		if err != nil {
			return nil, err
		}
		encodeStmts = append(encodeStmts, stmts...)

	case *definition.Array:
		elemTy := ty.ElementType
		elemBitSize := field.FieldBitSize / ty.Length

		name := g.generateEncodeStructFieldName(field.FieldName)

		// temp variable declaration
		var nameIndex func(int64) string
		switch ty.ElementType.(type) {
		case *definition.Struct, *definition.BasicType:
			nameIndex = func(index int64) string {
				return fmt.Sprintf("%s[%d]", name, index)
			}
		case *definition.Enum:
			tempName := g.generateEncodeTempVarName(startBits)

			nameIndex = func(_ int64) string {
				return tempName
			}

			// change elemTy to any integer type
			elemTy = &definition.Uint64
		default:
			return nil, fmt.Errorf("internal error: unsupported array element type %T", ty.ElementType)
		}

		for i := int64(0); i < ty.Length; i++ {
			subFrom := from + i*elemBitSize
			subTo := from + (i+1)*elemBitSize

			subName := nameIndex(i)

			switch ty.ElementType.(type) {
			case *definition.Enum:
				encodeNormalFieldTempVarAssignData := map[string]any{
					"TempName":  subName,
					"FieldName": fmt.Sprintf("%s[%d]", name, i),
				}
				assignStr := util.ExecuteTemplate(fieldEncoderTemplate, "encodeNormalFieldTempVarAssignEnum", nil, encodeNormalFieldTempVarAssignData)
				encodeStmts = append(encodeStmts, assignStr)
			default:
			}

			stmts, err := g.generateEncodeNormalFieldImpl(subName, elemTy, field.FieldOptions, subFrom, subTo)
			if err != nil {
				return nil, err
			}

			encodeStmts = append(encodeStmts, stmts...)
		}

	default:
		return nil, fmt.Errorf("internal error: unknown field kind %T", ty)
	}

	return encodeStmts, nil
}

// generateEncodeNormalFieldImpl does not handle array field or generate temp variable declaration
func (g PythonGenerator) generateEncodeNormalFieldImpl(fieldNameStr string, fieldType definition.Type, fieldOptions *util.OrderedMap[string, *definition.Option], from, to int64) ([]string, error) {
	encodeStmts := []string{}
	fieldBitSize := to - from

	switch ty := fieldType.(type) {
	case *definition.Struct:
		encodeNormalFieldStructData := map[string]any{
			"StructName": ty.StructName,
			"FieldName":  fieldNameStr,
			"FromByte":   from / 8,
			"ToByte":     (to + 7) / 8,
		}

		stmt := util.ExecuteTemplate(fieldEncoderTemplate, "encodeNormalFieldStruct", nil, encodeNormalFieldStructData)
		encodeStmts = append(encodeStmts, stmt)

	case *definition.Enum:
		panic("unreachable, enum field should be handled in generateEncodeNormalField")

	case *definition.BasicType:
		tyUintID := typeSizeMapUint[ty.TypeBitSize]
		if ty.GetTypeID().IsFloat() {
			// assign temp variable to cast float to uint
			// optimization for python only
			tempName := g.generateEncodeTempVarName(from)
			id := typeMapStructPackID[ty.GetTypeID()]
			uid := typeMapStructPackID[tyUintID]
			encodeNormalFieldTempVarAssignFloatCastData := map[string]any{
				"TempName":  tempName,
				"TyUint":    uid,
				"TyFloat":   id,
				"FieldName": fieldNameStr,
			}
			stmt := util.ExecuteTemplate(fieldEncoderTemplate, "encodeNormalFieldTempVarAssignFloatCast", nil, encodeNormalFieldTempVarAssignFloatCastData)
			encodeStmts = append(encodeStmts, stmt)

			fieldNameStr = tempName
		}

		// little endian as default
		fieldData := func(i int64) string {
			// expr = fieldNameStr >> 8*i
			expr := &definition.BinopExpr{
				Op: definition.ExprOp_SHR,
				Expr1: &definition.RawExpr{
					Expr: fieldNameStr,
				},
				Expr2: &definition.RawExpr{
					Expr: g.generateDec(8 * i),
				},
			}
			exprStr, err := g.GenerateExpr(expr, "")
			if err != nil {
				panic(fmt.Errorf("internal error: %s", err))
			}
			return exprStr
		}
		// big endian
		if gen.MatchOption(fieldOptions, "order", "big") {
			fieldData = func(i int64) string {
				// expr = fieldNameStr >> max(0, fieldBitSize-8*(i+1))
				expr := &definition.BinopExpr{
					Op: definition.ExprOp_SHR,
					Expr1: &definition.RawExpr{
						Expr: fieldNameStr,
					},
					Expr2: &definition.RawExpr{
						Expr: g.generateDec(max(0, fieldBitSize-8*(i+1))),
					},
				}
				exprStr, err := g.GenerateExpr(expr, "")
				if err != nil {
					panic(fmt.Errorf("internal error: %s", err))
				}
				return exprStr
			}
		}
		encodeStmts = append(encodeStmts, g.generateEncodeImpl(from, to, fieldData)...)

	case *definition.Array:
		panic("unreachable, array field should be handled in generateEncodeNormalField")

	default:
		return nil, fmt.Errorf("internal error: unknown field kind %T", ty)
	}

	return encodeStmts, nil
}

// generateEncodeImpl generates encode implementation from 'from' bit to 'to' bit and align to 8 bits
// from: start bit position of encoded data
// to: end bit position of encoded data
// from is inclusive, to is exclusive, i.e. [from, to)
//
// e.g. from = 3, to = 11
//
//	data[0] = (data[0] & 0b00000111) | ((fieldData(0) << 3) & 0b11111000)
//	data[1] = (data[1] & 0b11111000) | ((fieldData(0) >> 5) & 0b00000111)
//
// fieldData: a function callback to get expression of x-th byte data
//
// e.g. big endian
//
//	fieldData(0) -> ((structPtr->intField >> 24) & 0xff)
//	fieldData(1) -> ((structPtr->intField >> 16) & 0xff)
//	fieldData(2) -> ((structPtr->intField >> 8) & 0xff)
//	fieldData(3) -> ((structPtr->intField >> 0) & 0xff)
func (g PythonGenerator) generateEncodeImpl(from, to int64, fieldData func(int64) string) []string {
	encodeStmts := []string{}
	// generate encode implentation from 'from' bit to 'to' bit and align to 8 bits
	// e.g. from = 3, to = 11 -> loop 2 times: 3-7, 8-11
	for i := from; i < to; i = (i + 8) & (^7) {
		// nextI is the right bound of current encode expression
		// use nextI to calculate the mask of current encode expression
		nextI := min(to, (i+8)&(^7))
		dataMask := ((1 << (((nextI - 1) & 7) + 1)) - 1) & (^((1 << (i & 7)) - 1))

		// operator is '=' if is filling the whole byte, otherwise is '|='
		operator := ""
		if i%8 == 0 {
			operator = exprOpToString[definition.ExprOp_ASSIGN] // "="
		} else {
			operator = exprOpToString[definition.ExprOp_BOR] + exprOpToString[definition.ExprOp_ASSIGN] // "|="
		}

		// we use 'from' and 'to' to denote the bit position in encoded data
		// we use 'begin' and 'end' to denote the bit position in raw field data
		begin := i - from
		end := nextI - from

		var expr definition.Expr

		// 'i' is the start bit position in encoded data
		// 'j' is the start bit position in raw field data
		j := begin
		// first half
		// e.g. j = 3, end = 11
		//      j = 3, nextJ = 8, fieldMask = 0b11111000, shiftRight = 3
		if j < end {
			// nextJ is the right bound of current field data (aligned to 8 bits)
			nextJ := min(end, (j+8)&(^7))
			fieldMask := ((1 << (((nextJ - 1) & 7) + 1)) - 1) & (^((1 << (j & 7)) - 1))
			shiftRight := j % 8
			// expr = (fieldData(j/8) & fieldMask) >> j%8
			expr = &definition.BinopExpr{
				Op: definition.ExprOp_SHR,
				Expr1: &definition.BinopExpr{
					Op: definition.ExprOp_BAND,
					Expr1: &definition.RawExpr{
						Expr: fieldData(j / 8),
					},
					Expr2: &definition.RawExpr{
						Expr: g.generateBin(fieldMask),
					},
				},
				Expr2: &definition.RawExpr{
					Expr: fmt.Sprintf("%d", shiftRight),
				},
			}

			// jump to second half
			j = nextJ
		}
		// second half (if exists)
		// e.g. j = 8, end = 11
		//      j = 8, nextJ = 11, fieldMask = 0b00000111, shiftLeft = 5
		if j < end {
			nextJ := min(end, (j+8)&(^7))
			fieldMask := ((1 << (((nextJ - 1) & 7) + 1)) - 1) & (^((1 << (j & 7)) - 1))
			shiftLeft := 8 - nextJ%8
			// expr = expr | (fieldData(j/8) & fieldMask) << (8 - nextJ%8)
			expr = &definition.BinopExpr{
				Op:    definition.ExprOp_BOR,
				Expr1: expr,
				Expr2: &definition.BinopExpr{
					Op: definition.ExprOp_SHL,
					Expr1: &definition.BinopExpr{
						Op: definition.ExprOp_BAND,
						Expr1: &definition.RawExpr{
							Expr: fieldData(j / 8),
						},
						Expr2: &definition.RawExpr{
							Expr: g.generateBin(fieldMask),
						},
					},
					Expr2: &definition.RawExpr{
						Expr: fmt.Sprintf("%d", shiftLeft),
					},
				},
			}

			j = nextJ
		}

		// shift expr to match the bit position in encoded data (concerning 'i')
		shiftLeft := i % 8
		// expr = (expr << i%8) & dataMask
		expr = &definition.BinopExpr{
			Op: definition.ExprOp_BAND,
			Expr1: &definition.BinopExpr{
				Op:    definition.ExprOp_SHL,
				Expr1: expr,
				Expr2: &definition.RawExpr{
					Expr: fmt.Sprintf("%d", shiftLeft),
				},
			},
			Expr2: &definition.RawExpr{
				Expr: g.generateBin(dataMask),
			},
		}

		// generate encode expression
		exprStr, err := g.GenerateExpr(expr, "")
		if err != nil {
			panic(fmt.Errorf("internal error: %s", err))
		}

		// generate encode statement
		encodeImplData := map[string]any{
			"TyUint8":   typeMap[definition.TypeID_Uint8],
			"BytePos":   i / 8,
			"Operator":  operator,
			"FieldData": exprStr,
		}

		encodeStmt := util.ExecuteTemplate(fieldEncoderTemplate, "encodeImpl", nil, encodeImplData)
		encodeStmts = append(encodeStmts, encodeStmt)
	}
	return encodeStmts
}

// ==================== GenerateDecoder ====================

var decoderTemplate = `
{{- define "decodeField" -}}
    # {{ .Pos }} {{ .Field.GetFieldKind }}: {{ .Field }}
    {{- range $decodeStmt := .DecodeStmts }}
        {{ $decodeStmt }}
    {{- end -}}
{{- end -}}

{{- define "decoder" -}}
{{- $structName := .StructDef.StructName -}}
    # Decoder: {{ $structName }}
    def decode(self, data: bytearray) -> bool:
        {{- range $decodeStr := .DecodeStrs }}
        {{ $decodeStr }}
        {{- end }}
        return True
{{- end -}}
`

func (g PythonGenerator) GenerateDecoder(structDef *definition.Struct) (string, error) {
	decodeStrs := []string{}
	if err := structDef.ForEachFieldWithPos(func(field definition.Field, fieldIndex int, startBits int64, pos string) error {
		decodeStmts, err := g.generateDecodeField(field, startBits)
		if err != nil {
			return err
		}
		// skip
		if len(decodeStmts) == 0 {
			return nil
		}
		// remove blank lines
		filteredDecodeStmts := []string{}
		for _, stmt := range decodeStmts {
			if stmt != "" {
				filteredDecodeStmts = append(filteredDecodeStmts, stmt)
			}
		}
		decodeStmts = filteredDecodeStmts

		decodeFieldData := map[string]any{
			"Pos":         pos,
			"Field":       field,
			"DecodeStmts": decodeStmts,
		}

		str := util.ExecuteTemplate(decoderTemplate, "decodeField", nil, decodeFieldData)
		decodeStrs = append(decodeStrs, str)
		return nil
	}); err != nil {
		return "", err
	}

	fieldData := map[string]any{
		"StructDef":  structDef,
		"DecodeStrs": decodeStrs,
		"GenOption":  g.GenCtx.GenOptions,
	}

	decoderStr := util.ExecuteTemplate(decoderTemplate, "decoder", nil, fieldData)
	return decoderStr, nil
}

func (g PythonGenerator) generateDecodeField(field definition.Field, startBits int64) ([]string, error) {
	switch val := field.(type) {
	case *definition.ConstantField:
		return g.generateDecodeConstantField(val, startBits)
	case *definition.VoidField:
		return g.generateDecodeVoidField(val, startBits)
	case *definition.EmbeddedField:
		return g.generateDecodeEmbeddedField(val, startBits)
	case *definition.NormalField:
		return g.generateDecodeNormalField(val, startBits)
	default:
		return nil, fmt.Errorf("internal error: unknown field kind %T", val)
	}
}

var fieldDecoderTemplate = `
{{- define "decodeTempVarName" -}}
	temp_field_at_pos_{{ .StartBits }}
{{- end -}}

{{- define "decodeStructFieldName" -}}
	self._{{ .FieldName }}
{{- end -}}

{{- define "decodeConstantField" -}}
	if {{ .TempName }} != {{ .ConstantValue }}: return False
{{- end -}}

{{- define "decodeNormalFieldStruct" -}}
    if not {{ .FieldName }}.decode(data[{{ .FromByte }}:{{ .ToByte }}]): return False
{{- end -}}

{{- define "decodeNormalFieldTempVarAssignEnum" -}}
	{{ .FieldName }} = {{ .EnumName }}({{ .TempName }})
{{- end -}}

{{- define "decodeNormalFieldFloatCast" -}}
	{{ .FieldName }} = struct.unpack('<{{ .TyFloat }}', struct.pack('<{{ .TyUint }}', {{ .FieldName }}))[0]
{{- end -}}

{{- define "decodeImpl" -}}
    {{ .FieldName }} {{ .Operator }} {{ .Expr }}
{{- end -}}

{{- define "signExtendArith" -}}
    {{ .FieldName }} = (({{ .FieldName }}) ^ {{ .SignMask }}) - {{ .SignMask }}
{{- end -}}
`

func (g PythonGenerator) generateDecodeTempVarName(startBits int64) string {
	decoderTempVarNameData := map[string]any{
		"StartBits": startBits,
	}

	return util.ExecuteTemplate(fieldDecoderTemplate, "decodeTempVarName", nil, decoderTempVarNameData)
}

func (g PythonGenerator) generateDecodeStructFieldName(name string) string {
	decodeStructFieldNameData := map[string]any{
		"FieldName": name,
	}

	return util.ExecuteTemplate(fieldDecoderTemplate, "decodeStructFieldName", nil, decodeStructFieldNameData)
}

func (g PythonGenerator) generateDecodeConstantField(field *definition.ConstantField, startBits int64) ([]string, error) {
	decodeStmts := []string{}

	tempName := g.generateDecodeTempVarName(startBits)

	from := startBits
	to := startBits + field.GetFieldBitSize()

	stmts, err := g.generateDecodeNormalFieldImpl(tempName, field.FieldType, field.FieldOptions, from, to)
	if err != nil {
		return nil, err
	}

	decodeStmts = append(decodeStmts, stmts...)

	decodeConstantFieldData := map[string]any{
		"TempName":      tempName,
		"ConstantValue": field.FieldConstant.GetLiteralValue(),
	}

	checkStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeConstantField", nil, decodeConstantFieldData)
	decodeStmts = append(decodeStmts, checkStr)

	return decodeStmts, nil
}

func (g PythonGenerator) generateDecodeVoidField(field *definition.VoidField, startBits int64) ([]string, error) {
	return []string{""}, nil
}

func (g PythonGenerator) generateDecodeEmbeddedField(field *definition.EmbeddedField, startBits int64) ([]string, error) {
	return nil, nil
}

func (g PythonGenerator) generateDecodeNormalField(field *definition.NormalField, startBits int64) ([]string, error) {
	from := startBits
	to := startBits + field.GetFieldBitSize()
	decodeStmts := []string{}

	switch ty := field.FieldType.(type) {
	case *definition.Struct, *definition.BasicType:
		name := g.generateDecodeStructFieldName(field.FieldName)
		stmts, err := g.generateDecodeNormalFieldImpl(name, ty, field.FieldOptions, from, to)
		if err != nil {
			return nil, err
		}
		decodeStmts = append(decodeStmts, stmts...)

	case *definition.Enum:
		// any integer type is ok
		tempTy := &definition.Uint64
		tempName := g.generateDecodeTempVarName(startBits)

		stmts, err := g.generateDecodeNormalFieldImpl(tempName, tempTy, field.FieldOptions, from, to)
		if err != nil {
			return nil, err
		}
		decodeStmts = append(decodeStmts, stmts...)

		decodeNormalFieldTempVarAssignEnumData := map[string]any{
			"FieldName": g.generateDecodeStructFieldName(field.FieldName),
			"EnumName":  ty.EnumName,
			"TempName":  tempName,
		}

		assignStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldTempVarAssignEnum", nil, decodeNormalFieldTempVarAssignEnumData)
		decodeStmts = append(decodeStmts, assignStr)

	case *definition.Array:
		elemTy := ty.ElementType
		elemBitSize := field.FieldBitSize / ty.Length

		name := g.generateDecodeStructFieldName(field.FieldName)

		// temp variable declaration
		var nameIndex func(int64) string
		switch ty.ElementType.(type) {
		case *definition.Struct, *definition.BasicType:
			nameIndex = func(index int64) string {
				return fmt.Sprintf("%s[%d]", name, index)
			}
		case *definition.Enum:
			tempName := g.generateDecodeTempVarName(startBits)

			nameIndex = func(_ int64) string {
				return tempName
			}

			// change elemTy to any integer type
			elemTy = &definition.Uint64
		default:
			return nil, fmt.Errorf("internal error: unsupported array element type %T", ty.ElementType)
		}

		for i := int64(0); i < ty.Length; i++ {
			subFrom := from + i*elemBitSize
			subTo := from + (i+1)*elemBitSize
			subName := nameIndex(i)

			stmts, err := g.generateDecodeNormalFieldImpl(subName, elemTy, field.FieldOptions, subFrom, subTo)
			if err != nil {
				return nil, err
			}
			decodeStmts = append(decodeStmts, stmts...)

			switch elemTy := ty.ElementType.(type) {
			case *definition.Enum:
				decodeNormalFieldTempVarAssignEnumData := map[string]any{
					"TempName":  subName,
					"EnumName":  elemTy.EnumName,
					"FieldName": fmt.Sprintf("%s[%d]", name, i),
				}
				assignStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldTempVarAssignEnum", nil, decodeNormalFieldTempVarAssignEnumData)
				decodeStmts = append(decodeStmts, assignStr)
			default:
			}
		}

	default:
		return nil, fmt.Errorf("internal error: unknown field kind %T", ty)
	}

	return decodeStmts, nil
}

func (g PythonGenerator) generateDecodeNormalFieldImpl(fieldNameStr string, fieldType definition.Type, fieldOptions *util.OrderedMap[string, *definition.Option], from, to int64) ([]string, error) {
	decodeStmts := []string{}
	fieldBitSize := to - from
	switch ty := fieldType.(type) {
	case *definition.Struct:
		decodeNormalFieldStructData := map[string]any{
			"FieldName": fieldNameStr,
			"FromByte":  from / 8,
			"ToByte":    (to + 7) / 8,
		}

		stmt := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldStruct", nil, decodeNormalFieldStructData)
		decodeStmts = append(decodeStmts, stmt)

	case *definition.Enum:
		panic("unreachable, enum field should be handled in generateDecodeNormalField")

	case *definition.BasicType:
		// little endian as default
		shiftCalc := func(i int64) string {
			return g.generateDec(i * 8)
		}
		if gen.MatchOption(fieldOptions, "order", "big") {
			// big endian
			shiftCalc = func(i int64) string {
				return g.generateDec(max(0, fieldBitSize-8*(i+1)))
			}
		}

		fieldProcessor := func(expr string, i int64) string {
			// operator is '=' if is filling the first bit, otherwise is '|='
			operator := ""
			if i == 0 {
				operator = exprOpToString[definition.ExprOp_ASSIGN] // "="
			} else {
				operator = exprOpToString[definition.ExprOp_BOR] + exprOpToString[definition.ExprOp_ASSIGN] // "|="
			}

			// exprExp = expr << 8*i or expr << max(0, fieldBitSize-8*(i+1))
			exprExp := &definition.BinopExpr{
				Op: definition.ExprOp_SHL,
				Expr1: &definition.RawExpr{
					Expr: expr,
				},
				Expr2: &definition.RawExpr{
					Expr: shiftCalc(i),
				},
			}

			exprExpStr, err := g.GenerateExpr(exprExp, "")
			if err != nil {
				panic(fmt.Errorf("internal error: %s", err))
			}

			decodeImplData := map[string]any{
				"FieldName": fieldNameStr,
				"Operator":  operator,
				"Expr":      exprExpStr,
			}

			return util.ExecuteTemplate(fieldDecoderTemplate, "decodeImpl", nil, decodeImplData)
		}

		decodeStmts = append(decodeStmts, g.generateDecodeImpl(from, to, fieldProcessor)...)

		// set sign bit
		if ty.GetTypeID().IsInt() {
			originFromBitSize := fieldBitSize

			switch g.GenCtx.GenOptions.SignExtMethod {
			case gen.SignExtMethodDefault, gen.SignExtMethodShift, gen.SignExtMethodArith:
				signMask := int64(1) << (originFromBitSize - 1)
				signMaskStr := g.generateHex(signMask)
				signExtendData := map[string]any{
					"FieldName": fieldNameStr,
					"SignMask":  signMaskStr,
				}

				stmt := util.ExecuteTemplate(fieldDecoderTemplate, "signExtendArith", nil, signExtendData)
				decodeStmts = append(decodeStmts, stmt)

			default:
				panic("unreachable, unknown sign extension method")
			}
		}

		// cast to float
		if ty.GetTypeID().IsFloat() {
			tyUintID := typeSizeMapUint[ty.TypeBitSize]
			id := typeMapStructPackID[ty.GetTypeID()]
			uid := typeMapStructPackID[tyUintID]
			decodeNormalFieldFloatCastData := map[string]any{
				"TyUint":    uid,
				"TyFloat":   id,
				"FieldName": fieldNameStr,
			}

			stmt := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldFloatCast", nil, decodeNormalFieldFloatCastData)
			decodeStmts = append(decodeStmts, stmt)
		}

	case *definition.Array:
		panic("unreachable, array field should be handled in generateDecodeNormalField")

	default:
		return nil, fmt.Errorf("internal error: unknown field kind %T", ty)
	}

	return decodeStmts, nil
}

// generateDecodeImpl generates decode implementation from 'from' bit to 'to' bit and align to 8 bits
// from: start bit position of encoded data
// to: end bit position of encoded data
// from is inclusive, to is exclusive, i.e. [from, to)
//
// e.g. from = 3, to = 19
//
//	exprOfExtract1stByteFromEncodedData = (((((uint8_t*)data)[0] & 0b11111000) >> 3) | ((((uint8_t*)data)[1] & 0b00000111) << 5))
//	exprOfExtract2ndByteFromEncodedData = (((((uint8_t*)data)[1] & 0b11111000) >> 3) | ((((uint8_t*)data)[2] & 0b00000111) << 5))
//
// fieldData: a function callback to generate expression of decoding x-th byte data (x is the byte index)
//
// e.g. little endian
//
//	fieldProcessor(exprOfExtract1stByteFromEncodedData, 0) -> (*(uint32_t*)(&(structPtr->intField))) = (exprOfExtract1stByteFromEncodedData << 0)
//	fieldProcessor(exprOfExtract2ndByteFromEncodedData, 1) -> (*(uint32_t*)(&(structPtr->intField))) |= (exprOfExtract2ndByteFromEncodedData << 8)
//	fieldProcessor(exprOfExtract3rdByteFromEncodedData, 2) -> (*(uint32_t*)(&(structPtr->intField))) |= (exprOfExtract3rdByteFromEncodedData << 16)
//	fieldProcessor(exprOfExtract4thByteFromEncodedData, 3) -> (*(uint32_t*)(&(structPtr->intField))) |= (exprOfExtract4thByteFromEncodedData << 24)
func (g PythonGenerator) generateDecodeImpl(from, to int64, fieldProcessor func(string, int64) string) []string {
	decodeStmts := []string{}
	// generate decode implentation from 'from' bit to 'to' bit per 8 bits
	// e.g. from = 3, to = 19 -> loop 2 times: 3-10, 11-19 (not aligned to 8 bits!!!)
	for i := from; i < to; i += 8 {

		// we use 'from' and 'to' to denote the bit position in encoded data
		begin := i
		end := min(to, i+8)

		var expr definition.Expr

		// separator to check if is aligned to 8 bits
		sep := min(end, (begin+8)&(^7))
		// first half
		// e.g. begin = 3, end = 10
		//      sep = 8, fieldMask = 0b11111000, shiftRight = 3
		if begin < sep { // always true, just for beauty
			fieldMask := ((1 << (((sep - 1) & 7) + 1)) - 1) & (^((1 << (begin & 7)) - 1))
			shiftRight := begin % 8
			// expr = (((data[begin/8] & fieldMask) >> shiftRight)
			expr = &definition.BinopExpr{
				Op: definition.ExprOp_SHR,
				Expr1: &definition.BinopExpr{
					Op: definition.ExprOp_BAND,
					Expr1: &definition.RawExpr{
						Expr: fmt.Sprintf("data[%d]", begin/8),
					},
					Expr2: &definition.RawExpr{
						Expr: g.generateBin(fieldMask),
					},
				},
				Expr2: &definition.RawExpr{
					Expr: fmt.Sprintf("%d", shiftRight),
				},
			}
		}
		// second half
		// e.g. begin = 8, end = 10
		//      sep = 8, fieldMask = 0b00000111, shiftLeft = 5
		if sep < end {
			fieldMask := ((1 << (((end - 1) & 7) + 1)) - 1) & (^((1 << (sep & 7)) - 1))
			shiftLeft := 8 - end%8
			// expr = expr | (((data[sep/8] & fieldMask) << shiftLeft)
			expr = &definition.BinopExpr{
				Op:    definition.ExprOp_BOR,
				Expr1: expr,
				Expr2: &definition.BinopExpr{
					Op: definition.ExprOp_SHL,
					Expr1: &definition.BinopExpr{
						Op: definition.ExprOp_BAND,
						Expr1: &definition.RawExpr{
							Expr: fmt.Sprintf("data[%d]", sep/8),
						},
						Expr2: &definition.RawExpr{
							Expr: g.generateBin(fieldMask),
						},
					},
					Expr2: &definition.RawExpr{
						Expr: fmt.Sprintf("%d", shiftLeft),
					},
				},
			}
		}

		// generate decode expression
		exprStr, err := g.GenerateExpr(expr, "")
		if err != nil {
			panic(fmt.Errorf("internal error: %s", err))
		}

		// generate decode statement
		decodeStmt := fieldProcessor(exprStr, (i-from)/8)
		decodeStmts = append(decodeStmts, decodeStmt)
	}
	return decodeStmts
}

// ==================== GenerateExpr ====================

func (g PythonGenerator) GenerateExpr(expr definition.Expr, valueStr string) (string, error) {
	generator := NewPythonExprGenerator(g.GenerateType, valueStr)
	return g.AcceptExpr(expr, generator)
}

// ==================== Expr Generator ====================

type PythonExprGenerator struct {
	*gen.GenExprDispatcher
	GenType          func(definition.Type) (string, error)
	ValueStr         string
	LiteralGenerator gen.LiteralGeneratorImpl // optional
}

func NewPythonExprGenerator(genType func(definition.Type) (string, error), valueStr string) *PythonExprGenerator {
	generator := &PythonExprGenerator{
		GenExprDispatcher: nil,
		GenType:           genType,
		ValueStr:          valueStr,
	}
	generator.GenExprDispatcher = gen.NewGenExprDispatcher(generator)
	return generator
}

func (g PythonExprGenerator) GenerateExpr(expr definition.Expr) (string, error) {
	return g.AcceptExpr(expr)
}

var exprOpToString = map[definition.ExprOp]string{
	definition.ExprOp_ADD:    "+",
	definition.ExprOp_SUB:    "-",
	definition.ExprOp_MUL:    "*",
	definition.ExprOp_DIV:    "/",
	definition.ExprOp_MOD:    "%",
	definition.ExprOp_POW:    "**",
	definition.ExprOp_SHL:    "<<",
	definition.ExprOp_SHR:    ">>",
	definition.ExprOp_LT:     "<",
	definition.ExprOp_LE:     "<=",
	definition.ExprOp_GT:     ">",
	definition.ExprOp_GE:     ">=",
	definition.ExprOp_EQ:     "==",
	definition.ExprOp_NE:     "!=",
	definition.ExprOp_BAND:   "&",
	definition.ExprOp_BXOR:   "^",
	definition.ExprOp_BOR:    "|",
	definition.ExprOp_AND:    "and",
	definition.ExprOp_OR:     "or",
	definition.ExprOp_NOT:    "not",
	definition.ExprOp_BNOT:   "~",
	definition.ExprOp_ASSIGN: "=",
}

func (g PythonExprGenerator) GenerateUnopExpr(expr *definition.UnopExpr) (string, error) {
	opStr, ok := exprOpToString[expr.Op]
	if !ok {
		return "", fmt.Errorf("unknown unop expr op: %s", expr.Op.String())
	}
	expr1, err := g.GenerateExpr(expr.Expr1)
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("(%s%s)", opStr, expr1), nil
}

func (g PythonExprGenerator) GenerateBinopExpr(expr *definition.BinopExpr) (string, error) {
	opStr, ok := exprOpToString[expr.Op]
	if !ok {
		return "", fmt.Errorf("unknown binop expr op: %s", expr.Op.String())
	}
	expr1, err := g.GenerateExpr(expr.Expr1)
	if err != nil {
		return "", err
	}
	expr2, err := g.GenerateExpr(expr.Expr2)
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("(%s %s %s)", expr1, opStr, expr2), nil
}

func (g PythonExprGenerator) GenerateCastExpr(expr *definition.CastExpr) (string, error) {
	expr1, err := g.GenerateExpr(expr.Expr1)
	if err != nil {
		return "", err
	}
	ty, err := g.GenType(expr.ToType)
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("%s(%s)", ty, expr1), nil
}

func (g PythonExprGenerator) GenerateConstantExpr(expr *definition.ConstantExpr) (string, error) {
	generator := g.LiteralGenerator
	if generator == nil {
		generator = NewPythonLiteralGenerator()
	}
	return g.AcceptLiteral(expr.ConstantValue, generator)
}

func (g PythonExprGenerator) GenerateTenaryExpr(expr *definition.TenaryExpr) (string, error) {
	cond, err := g.GenerateExpr(expr.Cond)
	if err != nil {
		return "", err
	}
	expr1, err := g.GenerateExpr(expr.Expr1)
	if err != nil {
		return "", err
	}
	expr2, err := g.GenerateExpr(expr.Expr2)
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("(%s if %s else %s)", cond, expr1, expr2), nil
}

func (g PythonExprGenerator) GenerateValueExpr(expr *definition.ValueExpr) (string, error) {
	return g.ValueStr, nil
}

func (g PythonExprGenerator) GenerateRawExpr(expr *definition.RawExpr) (string, error) {
	return expr.Expr, nil
}

// ==================== Literal Generator ====================

type PythonLiteralGenerator struct {
	*gen.GenLiteralDispatcher
}

func NewPythonLiteralGenerator() *PythonLiteralGenerator {
	generator := &PythonLiteralGenerator{
		GenLiteralDispatcher: nil,
	}
	generator.GenLiteralDispatcher = gen.NewGenLiteralDispatcher(generator)
	return generator
}

func (g PythonLiteralGenerator) GenerateLiteral(literal definition.Literal) (string, error) {
	return g.AcceptLiteral(literal)
}

func (g PythonLiteralGenerator) GenerateBoolLiteral(literal *definition.BoolLiteral) (string, error) {
	if literal.BoolValue {
		return "True", nil
	}
	return "False", nil
}

func (g PythonLiteralGenerator) GenerateIntLiteral(literal *definition.IntLiteral) (string, error) {
	return fmt.Sprintf("%d", literal.IntValue), nil
}

func (g PythonLiteralGenerator) GenerateFloatLiteral(literal *definition.FloatLiteral) (string, error) {
	return fmt.Sprintf("%f", literal.FloatValue), nil
}

func (g PythonLiteralGenerator) GenerateStringLiteral(literal *definition.StringLiteral) (string, error) {
	return fmt.Sprintf(`"%s"`, literal.StringValue), nil
}
