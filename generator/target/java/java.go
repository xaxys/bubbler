package java

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"math"
	"strings"
	"text/template"

	"github.com/xaxys/bubbler/definition"
	"github.com/xaxys/bubbler/generator/gen"
	"github.com/xaxys/bubbler/util"
)

type GeneratedType struct {
	GeneratedDef string
}

// ==================== Java Generator ====================

type JavaGenerator struct {
	*gen.GenDispatcher
	GenCtx   *gen.GenCtx
	GenTypes *util.OrderedMap[string, *GeneratedType]
	GenStack *util.OrderedMap[string, any]
	Warning  definition.TopLevelWarning
}

func NewJavaGenerator() *JavaGenerator {
	generator := &JavaGenerator{
		GenDispatcher: nil,
		GenTypes:      util.NewOrderedMap[string, *GeneratedType](),
		GenStack:      util.NewOrderedMap[string, any](),
		Warning:       nil,
	}
	generator.GenDispatcher = gen.NewGenDispatcher(generator)
	return generator
}

// ==================== Util ====================

func (g *JavaGenerator) generateDec(value any) string {
	if util.ToInt64(value) > math.MaxInt32 || util.ToInt64(value) < math.MinInt32 {
		return fmt.Sprintf("%dL", value)
	}
	return fmt.Sprintf("%d", value)
}

func (g *JavaGenerator) generateHex(value any) string {
	if g.GenCtx.GenOptions.DecimalNumber {
		g.generateDec(value)
	}
	if util.ToInt64(value) > math.MaxInt32 || util.ToInt64(value) < math.MinInt32 {
		return fmt.Sprintf("0x%XL", value)
	}
	return fmt.Sprintf("0x%X", value)
}

func (g *JavaGenerator) generateBin(value any) string {
	if g.GenCtx.GenOptions.DecimalNumber {
		g.generateDec(value)
	}
	if util.ToInt64(value) > math.MaxInt32 || util.ToInt64(value) < math.MinInt32 {
		return fmt.Sprintf("0b%bL", value)
	}
	return fmt.Sprintf("0b%b", value)
}

// ==================== Generate ====================

func (g *JavaGenerator) Generate(ctx *gen.GenCtx) (retErr error, retWarnings error) {
	g.GenCtx = ctx
	if ctx.GenOptions.SignExtMethod == gen.SignExtMethodShift {
		warn := &definition.GenerateWarning{
			Warning: &definition.OptionNotAvailableWarning{
				OptionName: "signext",
				Reason:     "Java target does not support sign extension method 'shift', default method will be used",
			},
		}
		g.Warning = definition.TopLevelWarningsJoin(g.Warning, warn)
	}
	if ctx.GenOptions.InnerClass {
		warn := &definition.GenerateWarning{
			Warning: &definition.OptionNotAvailableWarning{
				OptionName: "inner",
				Reason:     "Java target does not support inner class yet, this option will be ignored",
			},
		}
		g.Warning = definition.TopLevelWarningsJoin(g.Warning, warn)
	}
	if ctx.GenOptions.SingleFile {
		warn := &definition.GenerateWarning{
			Warning: &definition.OptionNotAvailableWarning{
				OptionName: "single",
				Reason:     "Java target does not support single file yet, this option will be ignored",
			},
		}
		g.Warning = definition.TopLevelWarningsJoin(g.Warning, warn)
	}
	var topErr definition.TopLevelError
	genErr := g.AcceptGenCtx(ctx)
	if genErr != nil {
		if _, ok := genErr.(definition.TopLevelError); !ok {
			genErr = &definition.GenerateError{
				Err: genErr,
			}
		}
		topErr = definition.TopLevelErrorsJoin(topErr, genErr.(definition.TopLevelError))
	}

	return topErr, g.Warning
}

// ==================== GenerateUnit ====================

var fileTemplate = `
{{- define "file" -}}
// Target: Java
// Generated by bubbler
// DO NOT EDIT
{{- if .Unit.Options.Has "java_package" }}
{{- $pkgName := .Unit.Options.MustGet "java_package" }}
package {{ slice $pkgName.OptionValue 1 -1 }};
{{- else }}
package {{ .Unit.Package }};
{{- end }}

{{ $curUnit := .Unit -}}
{{ range $unit := .Unit.LocalImports.Values -}}
{{ if $unit.Options.Has "java_package" -}}
{{ $pkgName := $unit.Options.MustGet "java_package" -}}
import {{ slice $pkgName.OptionValue 1 -1 }}.*;
{{ else -}}
import {{ $unit.Package }}.*;
{{ end -}}
{{ end }}
import java.util.Arrays;
import java.util.Objects;

{{ .GenType.GeneratedDef }}
{{ end -}}
`

func (g JavaGenerator) GenerateUnit(unit *definition.CompilationUnit) error {
	if unit.LocalTypes.Len() == 0 && gen.MatchOption(unit.Options, "omit_empty", true) {
		return nil
	}

	for _, type_ := range unit.LocalTypes.Values() {
		start := g.GenTypes.Len()
		_, err := g.GenerateType(type_)
		if err != nil {
			return err
		}
		end := g.GenTypes.Len()
		genTypes := g.GenTypes.Sub(start, end)

		for _, entry := range genTypes.Entries() {
			name, genType := entry.Key, entry.Value
			fileData := map[string]any{
				"Unit":    unit,
				"GenType": genType,
			}

			fileStr := util.ExecuteTemplate(fileTemplate, "file", nil, fileData)
			filePath := ""
			if unit.Options.Has("java_package") {
				pkgName := fmt.Sprint(unit.Options.MustGet("java_package").OptionValue)
				pkgName = pkgName[1 : len(pkgName)-1]
				pkgName = strings.ReplaceAll(pkgName, ".", "/")
				filePath = fmt.Sprintf("/%s/%s.java", pkgName, name)
			} else {
				filePath = unit.Package.ToFilePath(fmt.Sprintf("/%s.java", name))
			}
			err := g.GenCtx.WriteFile(filePath, fileStr)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

// ==================== GenerateType ====================

func (g JavaGenerator) GenerateType(type_ definition.Type) (string, error) {
	return g.AcceptType(type_)
}

// ==================== GenerateTypeDefaultValue ====================

func (g JavaGenerator) GenerateTypeDefaultValue(type_ definition.Type) (string, error) {
	return g.AcceptTypeDefaultValue(type_)
}

// ==================== GenerateBasicType ====================

var typeMap = map[definition.TypeID]string{
	definition.TypeID_Bool:    "boolean",
	definition.TypeID_Uint8:   "byte",
	definition.TypeID_Uint16:  "short",
	definition.TypeID_Uint32:  "int",
	definition.TypeID_Uint64:  "long",
	definition.TypeID_Int8:    "byte",
	definition.TypeID_Int16:   "short",
	definition.TypeID_Int32:   "int",
	definition.TypeID_Int64:   "long",
	definition.TypeID_Float32: "float",
	definition.TypeID_Float64: "double",
	definition.TypeID_String:  "String",
	definition.TypeID_Bytes:   "byte[]",
}

func (g JavaGenerator) GenerateBasicType(type_ *definition.BasicType) (string, error) {
	if str, ok := typeMap[type_.TypeTypeID]; ok {
		return str, nil
	}
	return "", fmt.Errorf("unknown basic type: %s", type_.String())
}

// ==================== GenerateBasicTypeDefaultValue ====================

var typeDefValueMap = map[definition.TypeID]string{
	definition.TypeID_Bool:    "false",
	definition.TypeID_Uint8:   "0",
	definition.TypeID_Uint16:  "0",
	definition.TypeID_Uint32:  "0",
	definition.TypeID_Uint64:  "0",
	definition.TypeID_Int8:    "0",
	definition.TypeID_Int16:   "0",
	definition.TypeID_Int32:   "0",
	definition.TypeID_Int64:   "0L",
	definition.TypeID_Float32: "0.0f",
	definition.TypeID_Float64: "0.0",
}

func (g JavaGenerator) GenerateBasicTypeDefaultValue(type_ *definition.BasicType) (string, error) {
	if str, ok := typeDefValueMap[type_.TypeTypeID]; ok {
		return str, nil
	}
	return "", fmt.Errorf("unknown basic type: %s", type_.String())
}

// ==================== GenerateString ====================

func (g JavaGenerator) GenerateString(string_ *definition.String) (string, error) {
	return "String", nil
}

// ==================== GenerateStringDefaultValue ====================

func (g JavaGenerator) GenerateStringDefaultValue(string_ *definition.String) (string, error) {
	return `""`, nil
}

// ==================== GenerateBytes ====================

func (g JavaGenerator) GenerateBytes(bytes *definition.Bytes) (string, error) {
	return "byte[]", nil
}

// ==================== GenerateBytesDefaultValue ====================

func (g JavaGenerator) GenerateBytesDefaultValue(bytes *definition.Bytes) (string, error) {
	return `""`, nil
}

// ==================== GenerateArray ====================

func (g JavaGenerator) GenerateArray(array *definition.Array) (string, error) {
	elemTy, err := g.GenerateType(array.ElementType)
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("%s[]", elemTy), nil
}

// ==================== GenerateArrayDefaultValue ====================

func (g JavaGenerator) GenerateArrayDefaultValue(array *definition.Array) (string, error) {
	elemTy, err := g.GenerateType(array.ElementType)
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("new %s[%s]", elemTy, g.generateDec(array.Length)), nil
}

// ==================== GenerateStruct ====================

var structTemplate = `
{{- define "field" -}}
    // {{ .Pos }} {{ .Field.GetFieldKind }}: {{ .Field }}
    {{- $fieldStrLen := len .FieldStr -}}
    {{- if gt $fieldStrLen 0 }}
    {{ .FieldStr }}
    {{- end }}
{{ end -}}

{{- define "structConst" -}}
    public static long size() {
        return {{ .StructSize }};
    }
{{ end }}

{{- define "structDef" -}}
{{- $structDef := .StructDef -}}
{{- $fieldStrs := .FieldStrs -}}
// Struct: {{ $structDef }}
@SuppressWarnings({"RedundantCast", "PointlessBitwiseExpression", "DuplicatedCode", "PointlessArithmeticExpression", "RedundantIfStatement", "RedundantSuppression"})
public final class {{ $structDef.StructName }} {
    {{ range $fieldStr := $fieldStrs }}
    {{ $fieldStr }}
    {{- end }}
    {{ .StructConstStr }}
    {{- range $methodStr := .MethodStrs }}
    {{ $methodStr }}
    {{- end }}
    {{ .EncoderStr }}

    {{ .DecoderStr }}

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        {{ $structDef.StructName }} other = ({{ $structDef.StructName }}) obj;
    {{- range $field := $structDef.StructFields.Values }}
    {{- if $field.GetFieldKind.IsNormal }}
        {{- $fieldName := TocamelCase $field.FieldName }}
        {{- if $field.FieldType.GetTypeID.IsBasic }}
        if (this.{{ $fieldName }} != other.{{ $fieldName }}) return false;
        {{- else if $field.FieldType.GetTypeID.IsArray }}
        if (!Arrays.equals(this.{{ $fieldName }}, other.{{ $fieldName }})) return false;
        {{- else }}
        if (!Objects.equals(this.{{ $fieldName }}, other.{{ $fieldName }})) return false;
        {{- end }}
    {{- end }}
    {{- end }}
        return true;
    }

    @Override
    public int hashCode() {
        int result = 17;
    {{- range $field := $structDef.StructFields.Values }}
    {{- if $field.GetFieldKind.IsNormal }}
        {{- $fieldName := TocamelCase $field.FieldName }}
        {{- if $field.FieldType.GetTypeID.IsArray }}
        result = 31 * result + Arrays.hashCode({{ $fieldName }});
        {{- else }}
        result = 31 * result + Objects.hashCode({{ $fieldName }});
        {{- end }}
    {{- end }}
    {{- end }}
        return result;
    }
}
{{- end -}}

`

func (g JavaGenerator) GenerateStruct(structDef *definition.Struct) (string, error) {
	name := structDef.StructName
	// check if this struct is already generated
	if g.GenTypes.Has(structDef.StructName) {
		return name, nil
	}
	// check if this struct is in generating
	if g.GenStack.Has(structDef.StructName) {
		return name, nil
	}
	// push to stack
	g.GenStack.Put(structDef.StructName, nil)
	defer g.GenStack.Remove(structDef.StructName)

	genTy, err := g.generateStruct(structDef)
	if err != nil {
		return "", err
	}
	g.GenTypes.Put(structDef.StructName, genTy)

	return name, nil
}

func (g JavaGenerator) generateStruct(structDef *definition.Struct) (*GeneratedType, error) {
	fieldInitStrs := make([]string, structDef.StructFields.Len())
	if err := structDef.ForEachFieldWithPos(func(field definition.Field, index int, start int64, pos string) error {
		fieldStr, err := g.GenerateField(field)
		if err != nil {
			return err
		}

		fieldData := map[string]any{
			"Pos":      pos,
			"Field":    field,
			"FieldStr": fieldStr,
		}

		str := util.ExecuteTemplate(structTemplate, "field", nil, fieldData)
		fieldInitStrs[index] = str
		return nil
	}); err != nil {
		return nil, err
	}

	methodStrs := []string{}
	if err := structDef.ForEachField(func(field definition.Field, index int, start int64) error {
		if !field.GetFieldKind().IsNormal() {
			return nil
		}
		normalField := field.(*definition.NormalField)
		for _, group := range normalField.FieldMethods.Values() {
			for _, method := range group.Values() {
				methodStr, err := g.GenerateMethod(method)
				if err != nil {
					return err
				}
				methodStrs = append(methodStrs, methodStr)
			}
		}

		if !g.GenCtx.GenOptions.MinimalCode {
			rawGetterStr, err := g.GenerateRawGetter(field)
			if err != nil {
				return err
			}
			methodStrs = append(methodStrs, rawGetterStr)

			rawSetterStr, err := g.GenerateRawSetter(field)
			if err != nil {
				return err
			}
			methodStrs = append(methodStrs, rawSetterStr)
		}
		return nil
	}); err != nil {
		return nil, err
	}

	// TODO: handle dynamic size
	constData := map[string]any{
		"StructSize": structDef.StructBitSize / 8,
	}
	constStr := util.ExecuteTemplate(structTemplate, "structConst", nil, constData)

	encoderStr, err := g.GenerateEncoder(structDef)
	if err != nil {
		return nil, err
	}

	decoderStr, err := g.GenerateDecoder(structDef)
	if err != nil {
		return nil, err
	}

	defData := map[string]any{
		"StructDef":      structDef,
		"FieldStrs":      fieldInitStrs,
		"StructConstStr": constStr,
		"MethodStrs":     methodStrs,
		"EncoderStr":     encoderStr,
		"DecoderStr":     decoderStr,
	}

	defStr := util.ExecuteTemplate(structTemplate, "structDef", nil, defData)

	code := &GeneratedType{
		GeneratedDef: defStr,
	}
	return code, nil
}

// ==================== GenerateStructDefaultValue ====================

func (g JavaGenerator) GenerateStructDefaultValue(structDef *definition.Struct) (string, error) {
	return fmt.Sprintf("new %s()", structDef.StructName), nil
}

// ==================== GenerateField ====================

func (g JavaGenerator) GenerateField(field definition.Field) (string, error) {
	return g.AcceptField(field)
}

// ==================== GenerateNormalField ====================

var normalFieldTemplate = `
{{- define "normalField" -}}
    {{- $field := .Field -}}
    {{- $fieldName := TocamelCase .Field.FieldName -}}
    {{- $tyStr := GenerateType $field.FieldType -}}
    {{- $tyDefValue := GenerateTypeDefaultValue $field.FieldType -}}
    private {{ $tyStr }} {{ $fieldName }} = {{ $tyDefValue }};
{{- end -}}
`

func (g JavaGenerator) GenerateNormalField(field *definition.NormalField) (string, error) {
	funcMap := template.FuncMap{
		"GenerateType":             g.GenerateType,
		"GenerateTypeDefaultValue": g.GenerateTypeDefaultValue,
	}

	fieldData := map[string]any{
		"Field": field,
	}

	fieldStr := util.ExecuteTemplate(normalFieldTemplate, "normalField", funcMap, fieldData)
	return fieldStr, nil
}

// ==================== GenerateVoidField ====================

func (g JavaGenerator) GenerateVoidField(field *definition.VoidField) (string, error) {
	return "", nil
}

// ==================== GenerateEmbeddedField ====================

func (g JavaGenerator) GenerateEmbeddedField(field *definition.EmbeddedField) (string, error) {
	return "", nil
}

// ==================== GenerateConstantField ====================

var constantFieldTemplate = `
{{- define "constantField" -}}
    {{- $field := .Field -}}
    {{- $fieldName := TocamelCase .Field.FieldName -}}
    {{- $tyStr := GenerateType $field.FieldType -}}
    {{- $constValue := GenerateLiteral $field.FieldConstant -}}
    private final {{ $tyStr }} {{ $fieldName }} = ({{ $tyStr }}){{ $constValue }};
{{- end -}}
`

func (g JavaGenerator) GenerateConstantField(field *definition.ConstantField) (string, error) {
	literalGentor := NewJavaLiteralGenerator()

	funcMap := template.FuncMap{
		"GenerateType":    g.GenerateType,
		"GenerateLiteral": literalGentor.GenerateLiteral,
	}

	fieldData := map[string]any{
		"Field": field,
	}

	fieldStr := util.ExecuteTemplate(constantFieldTemplate, "constantField", funcMap, fieldData)
	return fieldStr, nil
}

// ==================== GenerateMethod ====================

func (g JavaGenerator) GenerateMethod(method definition.Method) (string, error) {
	return g.AcceptMethod(method)
}

// ==================== GenerateMethodDecl ====================

func (g JavaGenerator) GenerateMethodDecl(method definition.Method) (string, error) {
	return g.AcceptMethodDecl(method)
}

// ==================== GenerateDefaultGetterDecl ====================

func (g JavaGenerator) GenerateDefaultGetterDecl(method *definition.GetMethod) (string, error) {
	panic("not implemented")
}

// ==================== GenerateDefaultSetterDecl ====================

func (g JavaGenerator) GenerateDefaultSetterDecl(method *definition.SetMethod) (string, error) {
	panic("not implemented")
}

// ==================== GenerateCustomGetterDecl ====================

func (g JavaGenerator) GenerateCustomGetterDecl(method *definition.GetMethod) (string, error) {
	panic("not implemented")
}

// ==================== GenerateCustomSetterDecl ====================

func (g JavaGenerator) GenerateCustomSetterDecl(method *definition.SetMethod) (string, error) {
	panic("not implemented")
}

// ==================== GenerateRawGetterDecl ====================

func (g JavaGenerator) GenerateRawGetterDecl(field definition.Field) (string, error) {
	panic("not implemented")
}

// ==================== GenerateRawSetterDecl ====================

func (g JavaGenerator) GenerateRawSetterDecl(field definition.Field) (string, error) {
	panic("not implemented")
}

// ==================== GenerateDefaultGetter ====================

// TODO: support default getter

var defaultGetterTemplate = `
{{- define "defaultGetter" -}}
{{- $retTyStr := GenerateType .MethodDef.MethodRetType -}}
{{- $field := .MethodDef.MethodBelongs -}}
{{- $fieldName := TocamelCase $field.FieldName -}}
{{- $methodName := ToPascalCase $field.FieldName -}}
{{- $valueStr := printf "this.%s" $fieldName -}}
{{- $exprStr := GenerateExpr .MethodDef.MethodExpr $valueStr -}}
    // DefaultGetter: {{ $methodName }}
    public {{ $retTyStr }} get{{ $methodName }} {
        return {{ $expr }};
    }
{{ end -}}
`

func (g JavaGenerator) GenerateDefaultGetter(method *definition.GetMethod) (string, error) {
	funcMap := template.FuncMap{
		"GenerateType": g.GenerateType,
		"GenerateExpr": g.GenerateExpr,
	}

	fieldData := map[string]any{
		"MethodDef": method,
		"GenOption": g.GenCtx.GenOptions,
	}
	fieldStr := util.ExecuteTemplate(defaultGetterTemplate, "defaultGetter", funcMap, fieldData)
	return fieldStr, nil
}

// ==================== GenerateDefaultSetter ====================

// TODO: support default setter

var defaultSetterTemplate = `
{{- define "defaultSetter" -}}
{{- $paramTyStr := GenerateType .MethodDef.MethodParamType -}}
{{- $field := .MethodDef.MethodBelongs -}}
{{- $fieldName := TocamelCase $field.FieldName -}}
{{- $methodName := ToPascalCase $field.FieldName -}}
{{- $exprStr := GenerateExpr .MethodDef.MethodExpr "value" -}}
    // DefaultSetter: {{ $methodName }}
    public void set{{ $methodName }}({{ $paramTyStr }} value) {
        this.{{ $fieldName }} = {{ $exprStr }};
    }
{{ end }}
`

func (g JavaGenerator) GenerateDefaultSetter(method *definition.SetMethod) (string, error) {
	funcMap := template.FuncMap{
		"GenerateType": g.GenerateType,
		"GenerateExpr": g.GenerateExpr,
	}

	fieldData := map[string]any{
		"MethodDef": method,
		"GenOption": g.GenCtx.GenOptions,
	}
	fieldStr := util.ExecuteTemplate(defaultSetterTemplate, "defaultSetter", funcMap, fieldData)
	return fieldStr, nil
}

// ==================== GenerateCustomGetter ====================

var customGetterTemplate = `
{{- define "customGetter" -}}
{{- $retTyStr := GenerateType .MethodDef.MethodRetType -}}
{{- $field := .MethodDef.MethodBelongs -}}
{{- $fieldName := TocamelCase $field.FieldName -}}
{{- $methodName := ToPascalCase .MethodDef.MethodName -}}
{{- $valueStr := printf "this.%s" $fieldName -}}
{{- $exprStr := GenerateExpr .MethodDef.MethodExpr $valueStr -}}
    // CustomGetter: {{ $methodName }}
    public {{ $retTyStr }} get{{ $methodName }}() {
        return {{ $exprStr }};
    }
{{ end }}
`

func (g JavaGenerator) GenerateCustomGetter(method *definition.GetMethod) (string, error) {
	funcMap := template.FuncMap{
		"GenerateType": g.GenerateType,
		"GenerateExpr": g.GenerateExpr,
	}

	fieldData := map[string]any{
		"MethodDef": method,
		"GenOption": g.GenCtx.GenOptions,
	}
	fieldStr := util.ExecuteTemplate(customGetterTemplate, "customGetter", funcMap, fieldData)
	return fieldStr, nil
}

// ==================== GenerateCustomSetter ====================

var customSetterTemplate = `
{{- define "customSetter" -}}
{{- $paramTyStr := GenerateType .MethodDef.MethodParamType -}}
{{- $field := .MethodDef.MethodBelongs -}}
{{- $fieldName := TocamelCase $field.FieldName -}}
{{- $methodName := ToPascalCase .MethodDef.MethodName -}}
{{- $exprStr := GenerateExpr .MethodDef.MethodExpr "value" -}}
    // CustomSetter: {{ $methodName }}
    public void set{{ $methodName }}({{ $paramTyStr }} value) {
        this.{{ $fieldName }} = {{ $exprStr }};
    }
{{ end }}
`

func (g JavaGenerator) GenerateCustomSetter(method *definition.SetMethod) (string, error) {
	funcMap := template.FuncMap{
		"GenerateType": g.GenerateType,
		"GenerateExpr": g.GenerateExpr,
	}

	fieldData := map[string]any{
		"MethodDef": method,
		"GenOption": g.GenCtx.GenOptions,
	}
	fieldStr := util.ExecuteTemplate(customSetterTemplate, "customSetter", funcMap, fieldData)
	return fieldStr, nil
}

// ==================== GenerateRawGetter ====================

var rawGetterTemplate = `
{{- define "rawGetter" -}}
{{- $retTyStr := GenerateType .FieldDef.FieldType -}}
{{- $fieldName := TocamelCase .FieldDef.FieldName -}}
{{- $methodName := ToPascalCase .FieldDef.FieldName -}}
    // RawGetter: {{ $methodName }}
    public {{ $retTyStr }} get{{ $methodName }}() {
        return this.{{ $fieldName }};
    }
{{ end }}

{{- define "rawGetterArray" -}}
{{- $retTyStr := GenerateType .FieldDef.FieldType -}}\
{{- $elemTyStr := GenerateType .FieldDef.FieldType.ElementType -}}
{{- $fieldName := TocamelCase .FieldDef.FieldName -}}
{{- $methodName := ToPascalCase .FieldDef.FieldName -}}
    // RawGetterArray: {{ $methodName }}
    public {{ $retTyStr }} get{{ $methodName }}() {
        return this.{{ $fieldName }};
    }

    // RawGetterArrayItem: {{ $methodName }}
    public {{ $elemTyStr }} get{{ $methodName }}At(int index) {
        return this.{{ $fieldName }}[index];
    }
{{ end }}

{{- define "rawGetterSelector" -}}
{{- if .FieldDef.FieldType.GetTypeID.IsArray }}
    {{- template "rawGetterArray" . }}
{{- else }}
    {{- template "rawGetter" . }}
{{- end -}}
{{ end }}
`

func (g JavaGenerator) GenerateRawGetter(field definition.Field) (string, error) {
	funcMap := template.FuncMap{
		"GenerateType": g.GenerateType,
	}

	fieldData := map[string]any{
		"FieldDef":  field,
		"GenOption": g.GenCtx.GenOptions,
	}
	fieldStr := util.ExecuteTemplate(rawGetterTemplate, "rawGetterSelector", funcMap, fieldData)
	return fieldStr, nil
}

// ==================== GenerateRawSetter ====================

var rawSetterTemplate = `
{{- define "rawSetter" -}}
{{- $paramTyStr := GenerateType .FieldDef.FieldType -}}
{{- $fieldName := TocamelCase .FieldDef.FieldName -}}
{{- $methodName := ToPascalCase .FieldDef.FieldName -}}
    // RawSetter: {{ $fieldName }}
    public void set{{ $methodName }}({{ $paramTyStr }} value) {
        this.{{ $fieldName }} = value;
    }
{{ end }}

{{- define "rawSetterArray" -}}
{{- $paramTyStr := GenerateType .FieldDef.FieldType -}}
{{- $elemTyStr := GenerateType .FieldDef.FieldType.ElementType -}}
{{- $fieldName := TocamelCase .FieldDef.FieldName -}}
{{- $methodName := ToPascalCase .FieldDef.FieldName -}}
    // RawSetterArray: {{ $methodName }}
    public void set{{ $methodName }}({{ $paramTyStr }} value) {
        this.{{ $fieldName }} = value;
    }

    // RawSetterArrayItem: {{ $methodName }}
    public void set{{ $methodName }}At(int index, {{ $elemTyStr }} value) {
        this.{{ $fieldName }}[index] = value;
    }
{{ end }}

{{- define "rawSetterSelector" -}}
{{- if .FieldDef.FieldType.GetTypeID.IsArray }}
    {{- template "rawSetterArray" . }}
{{- else }}
    {{- template "rawSetter" . }}
{{- end -}}
{{ end }}
`

func (g JavaGenerator) GenerateRawSetter(field definition.Field) (string, error) {
	funcMap := template.FuncMap{
		"GenerateType": g.GenerateType,
	}

	fieldData := map[string]any{
		"FieldDef":  field,
		"GenOption": g.GenCtx.GenOptions,
	}
	fieldStr := util.ExecuteTemplate(rawSetterTemplate, "rawSetterSelector", funcMap, fieldData)
	return fieldStr, nil
}

// ==================== GenerateEnum ====================

func (g JavaGenerator) GenerateEnum(enumDef *definition.Enum) (string, error) {
	name := enumDef.EnumName
	// check if this enum is already generated
	if g.GenTypes.Has(enumDef.EnumName) {
		return name, nil
	}
	// check if this enum is in generating
	if g.GenStack.Has(enumDef.EnumName) {
		return name, nil
	}
	// push to stack
	g.GenStack.Put(enumDef.EnumName, nil)
	defer g.GenStack.Remove(enumDef.EnumName)

	genTy, err := g.generateEnum(enumDef)
	if err != nil {
		return "", err
	}
	g.GenTypes.Put(enumDef.EnumName, genTy)

	return name, nil
}

var enumTemplate = `
{{- define "enumDef" -}}
// Enum: {{ .EnumDef.ShortString }}
public enum {{ .EnumDef.EnumName }} {
    {{- range .EnumDef.EnumValues.Values }}
    {{ .EnumValueName }}({{ .EnumValue }}),
    {{- end }}
    ;

    private final int value;

    public final int getNumber() {
        return value;
    }

    public static {{ .EnumDef.EnumName }} valueOf(byte value) {
        return forNumber(value);
    }

    public static {{ .EnumDef.EnumName }} valueOf(short value) {
        return forNumber(value);
    }

    public static {{ .EnumDef.EnumName }} valueOf(int value) {
        return forNumber(value);
    }

    public static {{ .EnumDef.EnumName }} forNumber(byte value) {
        return forNumber(Byte.toUnsignedInt(value));
    }

    public static {{ .EnumDef.EnumName }} forNumber(short value) {
        return forNumber(Short.toUnsignedInt(value));
    }

    public static {{ .EnumDef.EnumName }} forNumber(int value) {
        switch (value) {
        {{- range .EnumDef.EnumValues.Values }}
            case {{ .EnumValue }}: return {{ .EnumValueName }};
        {{- end }}
            default: return null;
        }
    }

    private {{ .EnumDef.EnumName }}(int value) {
        this.value = value;
    }
}
{{- end -}}
`

func (g JavaGenerator) generateEnum(enumDef *definition.Enum) (*GeneratedType, error) {
	enumDefData := map[string]any{
		"EnumDef": enumDef,
	}

	enumDefStr := util.ExecuteTemplate(enumTemplate, "enumDef", nil, enumDefData)

	code := &GeneratedType{
		GeneratedDef: enumDefStr,
	}

	return code, nil
}

// ==================== GenerateEnumDefaultValue ====================

func (g JavaGenerator) GenerateEnumDefaultValue(enumDef *definition.Enum) (string, error) {
	return "null", nil
}

// ==================== Encode/Decode Util ====================

var typeSizeMapUint = map[int64]definition.TypeID{
	8:  definition.TypeID_Uint8,
	16: definition.TypeID_Uint16,
	32: definition.TypeID_Uint32,
	64: definition.TypeID_Uint64,
}

var typeSizeMapInt = map[int64]definition.TypeID{
	8:  definition.TypeID_Int8,
	16: definition.TypeID_Int16,
	32: definition.TypeID_Int32,
	64: definition.TypeID_Int64,
}

func typeSizeToUintStr(size int64) string {
	ty := typeSizeMapUint[size]
	return typeMap[ty]
}

func typeSizeToIntStr(size int64) string {
	ty := typeSizeMapInt[size]
	return typeMap[ty]
}

// ==================== GenerateEncoder ====================

var encoderTemplate = `
{{- define "encodeField" -}}
    // {{ .Pos }} {{ .Field.GetFieldKind }}: {{ .Field }}
    {{- range $encodeStmt := .EncodeStmts }}
        {{ $encodeStmt }}
    {{- end -}}
{{- end -}}

{{- define "encoder" -}}
{{- $structName := .StructDef.StructName -}}
    // Encoder: {{ $structName }}
    public byte[] encode() {
        byte[] data = new byte[{{ calc .StructDef.StructBitSize "/" 8 }}];
        this.encode(data, 0);
        return data;
    }

    public byte[] encode(byte[] data, int start) {
        {{- range $encodeStr := .EncodeStrs }}
        {{ $encodeStr }}
        {{- end }}
        return data;
    }
{{- end -}}
`

func (g JavaGenerator) GenerateEncoder(structDef *definition.Struct) (string, error) {
	encodeStrs := []string{}
	if err := structDef.ForEachFieldWithPos(func(field definition.Field, fieldIndex int, startBits int64, pos string) error {
		encodeStmts, err := g.generateEncodeField(field, startBits)
		if err != nil {
			return err
		}
		// skip
		if len(encodeStmts) == 0 {
			return nil
		}
		// remove blank lines
		filteredEncodeStmts := []string{}
		for _, stmt := range encodeStmts {
			if stmt != "" {
				filteredEncodeStmts = append(filteredEncodeStmts, stmt)
			}
		}
		encodeStmts = filteredEncodeStmts

		encodeFieldData := map[string]any{
			"Pos":         pos,
			"Field":       field,
			"EncodeStmts": encodeStmts,
		}

		str := util.ExecuteTemplate(encoderTemplate, "encodeField", nil, encodeFieldData)
		encodeStrs = append(encodeStrs, str)
		return nil
	}); err != nil {
		return "", err
	}

	fieldData := map[string]any{
		"StructDef":  structDef,
		"EncodeStrs": encodeStrs,
		"GenOption":  g.GenCtx.GenOptions,
	}

	encoderStr := util.ExecuteTemplate(encoderTemplate, "encoder", nil, fieldData)
	return encoderStr, nil
}

// return multiple statements (lines) to encode a field
func (g JavaGenerator) generateEncodeField(field definition.Field, startBits int64) ([]string, error) {
	switch val := field.(type) {
	case *definition.ConstantField:
		return g.generateEncodeConstantField(val, startBits)
	case *definition.VoidField:
		return g.generateEncodeVoidField(val, startBits)
	case *definition.EmbeddedField:
		return g.generateEncodeEmbeddedField(val, startBits)
	case *definition.NormalField:
		return g.generateEncodeNormalField(val, startBits)
	default:
		return nil, fmt.Errorf("internal error: unknown field kind %T", val)
	}
}

var fieldEncoderTemplate = `
{{- define "encodeTempVarName" -}}
    tempFieldAtPos{{ .StartBits }}
{{- end -}}

{{- define "encodeStructFieldName" -}}
{{- $fieldName := TocamelCase .FieldName -}}
    this.{{ $fieldName }}
{{- end -}}

{{- define "encodeNormalFieldStruct" -}}
    {{ .FieldName }}.encode(data, start + {{ .FromByte }});
{{- end -}}

{{- define "encodeNormalFieldTempVarDecl" -}}
    {{ .TyUint }} {{ .TempName }} = ({{ .TyUint }}){{ .FieldName }};
{{- end -}}

{{- define "encodeNormalFieldTempVarDeclEnum" -}}
    {{ .TyUint }} {{ .TempName }} = ({{ .TyUint }}){{ .FieldName }}.getNumber();
{{- end -}}

{{- define "encodeNormalFieldTempVarDeclBoolCast" -}}
    byte {{ .TempName }} = {{ .FieldName }} ? (byte)1 : (byte)0;
{{- end -}}

{{- define "encodeNormalFieldTempVarDeclFloatCast" -}}
{{- if .IsFloat32 -}}
    {{ .TyUint }} {{ .TempName }} = Float.floatToRawIntBits({{ .FieldName }});
{{- else -}}
    {{ .TyUint }} {{ .TempName }} = Double.doubleToRawLongBits({{ .FieldName }});
{{- end -}}
{{- end -}}

{{- define "encodeNormalFieldTempVarDeclOnly" -}}
    {{ .TyUint }} {{ .TempName }};
{{- end -}}

{{- define "encodeNormalFieldTempVarAssign" -}}
    {{ .TempName }} = ({{ .TyUint }}){{ .FieldName }};
{{- end -}}

{{- define "encodeNormalFieldTempVarAssignEnum" -}}
    {{ .TempName }} = ({{ .TyUint }}){{ .FieldName }}.getNumber();
{{- end -}}

{{- define "encodeNormalFieldTempVarAssignBoolCast" -}}
    {{ .TempName }} = {{ .FieldName }} ? (byte)1 : (byte)0;
{{- end -}}

{{- define "encodeNormalFieldTempVarAssignFloatCast" -}}
{{- if .IsFloat32 -}}
    {{ .TempName }} = Float.floatToRawIntBits({{ .FieldName }});
{{- else -}}
    {{ .TempName }} = Double.doubleToRawLongBits({{ .FieldName }});
{{- end -}}
{{- end -}}

{{- define "encodeImpl" -}}
    data[start + {{ .BytePos }}] {{ .Operator }} (byte){{ .FieldData }};
{{- end -}}
`

func (g JavaGenerator) generateEncodeTempVarName(startBits int64) string {
	encodeTempVarNameData := map[string]any{
		"StartBits": startBits,
	}

	return util.ExecuteTemplate(fieldEncoderTemplate, "encodeTempVarName", nil, encodeTempVarNameData)
}

func (g JavaGenerator) generateEncodeStructFieldName(name string) string {
	encodeStructFieldNameData := map[string]any{
		"FieldName": name,
	}

	return util.ExecuteTemplate(fieldEncoderTemplate, "encodeStructFieldName", nil, encodeStructFieldNameData)
}

func (g JavaGenerator) generateEncodeConstantField(field *definition.ConstantField, startBits int64) ([]string, error) {
	var byteOrder binary.ByteOrder = binary.LittleEndian
	if gen.MatchOption(field.FieldOptions, "order", "big") {
		byteOrder = binary.BigEndian
	}

	buffer := &bytes.Buffer{}
	value := field.FieldConstant.GetLiteralValueIn(field.FieldType.TypeTypeID)
	err := binary.Write(buffer, byteOrder, value)
	if err != nil {
		return nil, fmt.Errorf("internal error: %s", err)
	}

	data := buffer.Bytes()
	fieldData := func(i int64) string {
		return g.generateHex(data[i])
	}

	from := startBits
	to := startBits + field.GetFieldBitSize()

	encodeStmts := g.generateEncodeImpl(from, to, fieldData)
	return encodeStmts, nil
}

func (g JavaGenerator) generateEncodeVoidField(field *definition.VoidField, startBits int64) ([]string, error) {
	return []string{""}, nil
}

func (g JavaGenerator) generateEncodeEmbeddedField(field *definition.EmbeddedField, startBits int64) ([]string, error) {
	return nil, nil
}

func (g JavaGenerator) generateEncodeNormalField(field *definition.NormalField, startBits int64) ([]string, error) {
	from := startBits
	to := startBits + field.GetFieldBitSize()
	encodeStmts := []string{}

	switch ty := field.FieldType.(type) {
	case *definition.Struct:
		name := g.generateEncodeStructFieldName(field.FieldName)
		stmts, err := g.generateEncodeNormalFieldImpl(name, ty, field.FieldOptions, from, to)
		if err != nil {
			return nil, err
		}
		encodeStmts = append(encodeStmts, stmts...)

	case *definition.BasicType:
		name := g.generateEncodeStructFieldName(field.FieldName)

		if ty.GetTypeID().IsBool() {
			// decl and assign temp variable to cast bool to byte
			// optimization for java only
			tempName := g.generateEncodeTempVarName(startBits)
			encodeNormalFieldTempVarDeclBoolCastData := map[string]any{
				"TempName":  tempName,
				"FieldName": name,
			}
			stmt := util.ExecuteTemplate(fieldEncoderTemplate, "encodeNormalFieldTempVarDeclBoolCast", nil, encodeNormalFieldTempVarDeclBoolCastData)
			encodeStmts = append(encodeStmts, stmt)

			name = tempName
		}

		tyUint := typeSizeToUintStr(ty.GetTypeBitSize())
		if ty.GetTypeID().IsFloat() {
			// decl and assign temp variable to cast float to uint
			// optimization for java only
			tempName := g.generateEncodeTempVarName(startBits)
			encodeNormalFieldTempVarDeclFloatCastData := map[string]any{
				"TempName":  tempName,
				"TyUint":    tyUint,
				"FieldName": name,
				"IsFloat32": ty.GetTypeID() == definition.TypeID_Float32,
			}
			stmt := util.ExecuteTemplate(fieldEncoderTemplate, "encodeNormalFieldTempVarDeclFloatCast", nil, encodeNormalFieldTempVarDeclFloatCastData)
			encodeStmts = append(encodeStmts, stmt)

			name = tempName
		}

		stmts, err := g.generateEncodeNormalFieldImpl(name, ty, field.FieldOptions, from, to)
		if err != nil {
			return nil, err
		}
		encodeStmts = append(encodeStmts, stmts...)

	case *definition.Enum:
		fieldBitSize := field.GetFieldBitSize()
		fieldSize := (fieldBitSize + 7) / 8
		tySize := util.HighBit(fieldSize)
		tyUint := typeSizeToUintStr(tySize * 8)
		tyUintID := typeSizeMapUint[tySize*8]
		tempTy := definition.GetBasicType(tyUintID)
		tempName := g.generateEncodeTempVarName(startBits)

		encodeNormalFieldTempVarDeclEnumData := map[string]any{
			"TyUint":    tyUint,
			"TempName":  tempName,
			"FieldName": g.generateEncodeStructFieldName(field.FieldName),
		}
		declStr := util.ExecuteTemplate(fieldEncoderTemplate, "encodeNormalFieldTempVarDeclEnum", nil, encodeNormalFieldTempVarDeclEnumData)
		encodeStmts = append(encodeStmts, declStr)

		stmts, err := g.generateEncodeNormalFieldImpl(tempName, tempTy, field.FieldOptions, from, to)
		if err != nil {
			return nil, err
		}
		encodeStmts = append(encodeStmts, stmts...)

	case *definition.Array:
		elemTy := ty.ElementType
		elemTySize := (ty.ElementType.GetTypeBitSize() + 7) / 8
		elemBitSize := field.FieldBitSize / ty.Length
		tyUint := typeSizeToUintStr(elemTySize * 8)
		tyUintID := typeSizeMapUint[elemTySize*8]

		name := g.generateEncodeStructFieldName(field.FieldName)

		// temp variable declaration
		var nameIndex func(int64) string
		switch ty.ElementType.(type) {
		case *definition.Struct:
			nameIndex = func(index int64) string {
				return fmt.Sprintf("%s[%d]", name, index)
			}
		case *definition.BasicType:
			nameIndex = func(index int64) string {
				return fmt.Sprintf("%s[%d]", name, index)
			}
			// same as enum
			if ty.ElementType.GetTypeID().IsFloat() {
				tempName := g.generateEncodeTempVarName(startBits)

				encodeNormalFieldTempVarDeclOnlyData := map[string]any{
					"TyUint":   tyUint,
					"TempName": tempName,
				}
				declStr := util.ExecuteTemplate(fieldEncoderTemplate, "encodeNormalFieldTempVarDeclOnly", nil, encodeNormalFieldTempVarDeclOnlyData)
				encodeStmts = append(encodeStmts, declStr)

				nameIndex = func(_ int64) string {
					return tempName
				}

				// change elemTy to temp variable type
				elemTy = definition.GetBasicType(tyUintID)
			}
		case *definition.Enum:
			tempName := g.generateEncodeTempVarName(startBits)

			encodeNormalFieldTempVarDeclOnlyData := map[string]any{
				"TyUint":   tyUint,
				"TempName": tempName,
			}
			declStr := util.ExecuteTemplate(fieldEncoderTemplate, "encodeNormalFieldTempVarDeclOnly", nil, encodeNormalFieldTempVarDeclOnlyData)
			encodeStmts = append(encodeStmts, declStr)

			nameIndex = func(_ int64) string {
				return tempName
			}

			// change elemTy to temp variable type
			elemTy = definition.GetBasicType(tyUintID)
		default:
			return nil, fmt.Errorf("internal error: unsupported array element type %T", ty.ElementType)
		}

		for i := int64(0); i < ty.Length; i++ {
			subFrom := from + i*elemBitSize
			subTo := from + (i+1)*elemBitSize
			subName := nameIndex(i)

			switch ty.ElementType.(type) {
			case *definition.BasicType:
				if ty.ElementType.GetTypeID().IsFloat() {
					encodeNormalFieldTempVarAssignFloatCastData := map[string]any{
						"TempName":  subName,
						"FieldName": fmt.Sprintf("%s[%d]", name, i),
						"IsFloat32": ty.ElementType.GetTypeID() == definition.TypeID_Float32,
					}
					assignStr := util.ExecuteTemplate(fieldEncoderTemplate, "encodeNormalFieldTempVarAssignFloatCast", nil, encodeNormalFieldTempVarAssignFloatCastData)
					encodeStmts = append(encodeStmts, assignStr)
				}
			case *definition.Enum:
				encodeNormalFieldTempVarAssignData := map[string]any{
					"TyUint":    tyUint,
					"TempName":  subName,
					"FieldName": fmt.Sprintf("%s[%d]", name, i),
				}
				assignStr := util.ExecuteTemplate(fieldEncoderTemplate, "encodeNormalFieldTempVarAssignEnum", nil, encodeNormalFieldTempVarAssignData)
				encodeStmts = append(encodeStmts, assignStr)
			default:
			}

			stmts, err := g.generateEncodeNormalFieldImpl(subName, elemTy, field.FieldOptions, subFrom, subTo)
			if err != nil {
				return nil, err
			}

			encodeStmts = append(encodeStmts, stmts...)
		}

	default:
		return nil, fmt.Errorf("internal error: unknown field kind %T", ty)
	}

	return encodeStmts, nil
}

// generateEncodeNormalFieldImpl does not handle array field or generate temp variable declaration
func (g JavaGenerator) generateEncodeNormalFieldImpl(fieldNameStr string, fieldType definition.Type, fieldOptions *util.OrderedMap[string, *definition.Option], from, to int64) ([]string, error) {
	encodeStmts := []string{}
	fieldBitSize := to - from

	switch ty := fieldType.(type) {
	case *definition.Struct:
		encodeNormalFieldStructData := map[string]any{
			"StructName": ty.StructName,
			"FieldName":  fieldNameStr,
			"FromByte":   from / 8,
		}

		stmt := util.ExecuteTemplate(fieldEncoderTemplate, "encodeNormalFieldStruct", nil, encodeNormalFieldStructData)
		encodeStmts = append(encodeStmts, stmt)

	case *definition.Enum:
		panic("unreachable, enum field should be handled in generateEncodeNormalField")

	case *definition.BasicType:
		// little endian as default
		fieldData := func(i int64) string {
			// expr = fieldNameStr >> 8*i
			expr := &definition.BinopExpr{
				Op: definition.ExprOp_SHR,
				Expr1: &definition.RawExpr{
					Expr: fieldNameStr,
				},
				Expr2: &definition.RawExpr{
					Expr: g.generateDec(8 * i),
				},
			}
			exprStr, err := g.GenerateExpr(expr, "")
			if err != nil {
				panic(fmt.Errorf("internal error: %s", err))
			}
			return exprStr
		}
		// big endian
		if gen.MatchOption(fieldOptions, "order", "big") {
			fieldData = func(i int64) string {
				// expr = fieldNameStr >> max(0, fieldBitSize-8*(i+1))
				expr := &definition.BinopExpr{
					Op: definition.ExprOp_SHR,
					Expr1: &definition.RawExpr{
						Expr: fieldNameStr,
					},
					Expr2: &definition.RawExpr{
						Expr: g.generateDec(max(0, fieldBitSize-8*(i+1))),
					},
				}
				exprStr, err := g.GenerateExpr(expr, "")
				if err != nil {
					panic(fmt.Errorf("internal error: %s", err))
				}
				return exprStr
			}
		}
		encodeStmts = append(encodeStmts, g.generateEncodeImpl(from, to, fieldData)...)

	case *definition.Array:
		panic("unreachable, array field should be handled in generateEncodeNormalField")

	default:
		return nil, fmt.Errorf("internal error: unknown field kind %T", ty)
	}

	return encodeStmts, nil
}

// generateEncodeImpl generates encode implementation from 'from' bit to 'to' bit and align to 8 bits
// from: start bit position of encoded data
// to: end bit position of encoded data
// from is inclusive, to is exclusive, i.e. [from, to)
//
// e.g. from = 3, to = 11
//
//	data[0] = (data[0] & 0b00000111) | ((fieldData(0) << 3) & 0b11111000)
//	data[1] = (data[1] & 0b11111000) | ((fieldData(0) >> 5) & 0b00000111)
//
// fieldData: a function callback to get expression of x-th byte data
//
// e.g. big endian
//
//	fieldData(0) -> ((structPtr->intField >> 24) & 0xff)
//	fieldData(1) -> ((structPtr->intField >> 16) & 0xff)
//	fieldData(2) -> ((structPtr->intField >> 8) & 0xff)
//	fieldData(3) -> ((structPtr->intField >> 0) & 0xff)
func (g JavaGenerator) generateEncodeImpl(from, to int64, fieldData func(int64) string) []string {
	encodeStmts := []string{}
	// generate encode implentation from 'from' bit to 'to' bit and align to 8 bits
	// e.g. from = 3, to = 11 -> loop 2 times: 3-7, 8-11
	for i := from; i < to; i = (i + 8) & (^7) {
		// nextI is the right bound of current encode expression
		// use nextI to calculate the mask of current encode expression
		nextI := min(to, (i+8)&(^7))
		dataMask := ((1 << (((nextI - 1) & 7) + 1)) - 1) & (^((1 << (i & 7)) - 1))

		// operator is '=' if is filling the whole byte, otherwise is '|='
		operator := ""
		if i%8 == 0 {
			operator = exprOpToString[definition.ExprOp_ASSIGN] // "="
		} else {
			operator = exprOpToString[definition.ExprOp_BOR] + exprOpToString[definition.ExprOp_ASSIGN] // "|="
		}

		// we use 'from' and 'to' to denote the bit position in encoded data
		// we use 'begin' and 'end' to denote the bit position in raw field data
		begin := i - from
		end := nextI - from

		var expr definition.Expr

		// 'i' is the start bit position in encoded data
		// 'j' is the start bit position in raw field data
		j := begin
		// first half
		// e.g. j = 3, end = 11
		//      j = 3, nextJ = 8, fieldMask = 0b11111000, shiftRight = 3
		if j < end {
			// nextJ is the right bound of current field data (aligned to 8 bits)
			nextJ := min(end, (j+8)&(^7))
			fieldMask := ((1 << (((nextJ - 1) & 7) + 1)) - 1) & (^((1 << (j & 7)) - 1))
			shiftRight := j % 8
			// expr = (fieldData(j/8) & fieldMask) >> j%8
			expr = &definition.BinopExpr{
				Op: definition.ExprOp_SHR,
				Expr1: &definition.BinopExpr{
					Op: definition.ExprOp_BAND,
					Expr1: &definition.RawExpr{
						Expr: fieldData(j / 8),
					},
					Expr2: &definition.RawExpr{
						Expr: g.generateBin(fieldMask),
					},
				},
				Expr2: &definition.RawExpr{
					Expr: fmt.Sprintf("%d", shiftRight),
				},
			}

			// jump to second half
			j = nextJ
		}
		// second half (if exists)
		// e.g. j = 8, end = 11
		//      j = 8, nextJ = 11, fieldMask = 0b00000111, shiftLeft = 5
		if j < end {
			nextJ := min(end, (j+8)&(^7))
			fieldMask := ((1 << (((nextJ - 1) & 7) + 1)) - 1) & (^((1 << (j & 7)) - 1))
			shiftLeft := 8 - nextJ%8
			// expr = expr | (fieldData(j/8) & fieldMask) << (8 - nextJ%8)
			expr = &definition.BinopExpr{
				Op:    definition.ExprOp_BOR,
				Expr1: expr,
				Expr2: &definition.BinopExpr{
					Op: definition.ExprOp_SHL,
					Expr1: &definition.BinopExpr{
						Op: definition.ExprOp_BAND,
						Expr1: &definition.RawExpr{
							Expr: fieldData(j / 8),
						},
						Expr2: &definition.RawExpr{
							Expr: g.generateBin(fieldMask),
						},
					},
					Expr2: &definition.RawExpr{
						Expr: fmt.Sprintf("%d", shiftLeft),
					},
				},
			}

			j = nextJ
		}

		// shift expr to match the bit position in encoded data (concerning 'i')
		shiftLeft := i % 8
		// expr = (expr << i%8) & dataMask
		expr = &definition.BinopExpr{
			Op: definition.ExprOp_BAND,
			Expr1: &definition.BinopExpr{
				Op:    definition.ExprOp_SHL,
				Expr1: expr,
				Expr2: &definition.RawExpr{
					Expr: fmt.Sprintf("%d", shiftLeft),
				},
			},
			Expr2: &definition.RawExpr{
				Expr: g.generateBin(dataMask),
			},
		}

		// generate encode expression
		exprStr, err := g.GenerateExpr(expr, "")
		if err != nil {
			panic(fmt.Errorf("internal error: %s", err))
		}

		// generate encode statement
		encodeImplData := map[string]any{
			"TyUint8":   typeMap[definition.TypeID_Uint8],
			"BytePos":   i / 8,
			"Operator":  operator,
			"FieldData": exprStr,
		}

		encodeStmt := util.ExecuteTemplate(fieldEncoderTemplate, "encodeImpl", nil, encodeImplData)
		encodeStmts = append(encodeStmts, encodeStmt)
	}
	return encodeStmts
}

// ==================== GenerateDecoder ====================

var decoderTemplate = `
{{- define "decodeField" -}}
    // {{ .Pos }} {{ .Field.GetFieldKind }}: {{ .Field }}
    {{- range $decodeStmt := .DecodeStmts }}
        {{ $decodeStmt }}
    {{- end -}}
{{- end -}}

{{- define "decoder" -}}
{{- $structName := .StructDef.StructName -}}
    // Decoder: {{ $structName }}
    public boolean decode(byte[] data) {
        return this.decode(data, 0);
    }

    public boolean decode(byte[] data, int start) {
        {{- range $decodeStr := .DecodeStrs }}
        {{ $decodeStr }}
        {{- end }}
        return true;
    }
{{- end -}}
`

func (g JavaGenerator) GenerateDecoder(structDef *definition.Struct) (string, error) {
	decodeStrs := []string{}
	if err := structDef.ForEachFieldWithPos(func(field definition.Field, fieldIndex int, startBits int64, pos string) error {
		decodeStmts, err := g.generateDecodeField(field, startBits)
		if err != nil {
			return err
		}
		// skip
		if len(decodeStmts) == 0 {
			return nil
		}
		// remove blank lines
		filteredDecodeStmts := []string{}
		for _, stmt := range decodeStmts {
			if stmt != "" {
				filteredDecodeStmts = append(filteredDecodeStmts, stmt)
			}
		}
		decodeStmts = filteredDecodeStmts

		decodeFieldData := map[string]any{
			"Pos":         pos,
			"Field":       field,
			"DecodeStmts": decodeStmts,
		}

		str := util.ExecuteTemplate(decoderTemplate, "decodeField", nil, decodeFieldData)
		decodeStrs = append(decodeStrs, str)
		return nil
	}); err != nil {
		return "", err
	}

	fieldData := map[string]any{
		"StructDef":  structDef,
		"DecodeStrs": decodeStrs,
		"GenOption":  g.GenCtx.GenOptions,
	}

	decoderStr := util.ExecuteTemplate(decoderTemplate, "decoder", nil, fieldData)
	return decoderStr, nil
}

func (g JavaGenerator) generateDecodeField(field definition.Field, startBits int64) ([]string, error) {
	switch val := field.(type) {
	case *definition.ConstantField:
		return g.generateDecodeConstantField(val, startBits)
	case *definition.VoidField:
		return g.generateDecodeVoidField(val, startBits)
	case *definition.EmbeddedField:
		return g.generateDecodeEmbeddedField(val, startBits)
	case *definition.NormalField:
		return g.generateDecodeNormalField(val, startBits)
	default:
		return nil, fmt.Errorf("internal error: unknown field kind %T", val)
	}
}

var fieldDecoderTemplate = `
{{- define "decodeTempVarName" -}}
    tempFieldAtPos{{ .StartBits }}
{{- end -}}

{{- define "decodeStructFieldName" -}}
{{- $fieldName := TocamelCase .FieldName -}}
    this.{{ $fieldName }}
{{- end -}}

{{- define "decodeConstantField" -}}
    if ({{ .TempName }} != ({{ .TyUint }}){{ .ConstantValue }}) return false;
{{- end -}}

{{- define "decodeNormalFieldStruct" -}}
    if (!{{ .FieldName }}.decode(data, start + {{ .FromByte }})) return false;
{{- end -}}

{{- define "decodeNormalFieldTempVarDecl" -}}
    {{ .TyUint }} {{ .TempName }};
{{- end -}}

{{- define "decodeNormalFieldTempVarAssignEnum" -}}
    {{ .FieldName }} = {{ .EnumName }}.forNumber({{ .TempName }});
{{- end -}}

{{- define "decodeNormalFieldTempVarAssignBoolCast" -}}
    {{ .FieldName }} = {{ .TempName }} != 0;
{{- end -}}

{{- define "decodeNormalFieldTempVarAssignFloatCast" -}}
{{- if .IsFloat32 -}}
    {{ .FieldName }} = Float.intBitsToFloat({{ .TempName }});
{{- else -}}
    {{ .FieldName }} = Double.longBitsToDouble({{ .TempName }});
{{- end -}}
{{- end -}}

{{- define "decodeImpl" -}}
    {{ .FieldName }} {{ .Operator }} ({{ .FieldType }}){{ .Expr }};
{{- end -}}

{{- define "signExtendArith" -}}
    {{ .FieldName }} = ({{ .FieldType }})((({{ .FieldName }}) ^ {{ .SignMask }}) - {{ .SignMask }});
{{- end -}}
`

func (g JavaGenerator) generateDecodeTempVarName(startBits int64) string {
	decoderTempVarNameData := map[string]any{
		"StartBits": startBits,
	}

	return util.ExecuteTemplate(fieldDecoderTemplate, "decodeTempVarName", nil, decoderTempVarNameData)
}

func (g JavaGenerator) generateDecodeStructFieldName(name string) string {
	decodeStructFieldNameData := map[string]any{
		"FieldName": name,
	}

	return util.ExecuteTemplate(fieldDecoderTemplate, "decodeStructFieldName", nil, decodeStructFieldNameData)
}

func (g JavaGenerator) generateDecodeConstantField(field *definition.ConstantField, startBits int64) ([]string, error) {
	decodeStmts := []string{}

	fieldBitSize := field.GetFieldBitSize()
	fieldSize := (fieldBitSize + 7) / 8
	tySize := util.HighBit(fieldSize)
	tyUint := typeSizeToUintStr(tySize * 8)
	tempName := g.generateDecodeTempVarName(startBits)

	decodeNormalFieldTempVarDeclData := map[string]any{
		"TyUint":    tyUint,
		"TempName":  tempName,
		"FieldName": field.FieldName,
	}
	declStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldTempVarDecl", nil, decodeNormalFieldTempVarDeclData)
	decodeStmts = append(decodeStmts, declStr)

	from := startBits
	to := startBits + field.GetFieldBitSize()

	stmts, err := g.generateDecodeNormalFieldImpl(tempName, field.FieldType, field.FieldOptions, from, to)
	if err != nil {
		return nil, err
	}

	decodeStmts = append(decodeStmts, stmts...)

	literalValue, err := NewJavaLiteralGenerator().GenerateLiteral(field.FieldConstant)
	if err != nil {
		return nil, err
	}

	decodeConstantFieldData := map[string]any{
		"TyUint":        tyUint,
		"TempName":      tempName,
		"ConstantValue": literalValue,
	}

	checkStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeConstantField", nil, decodeConstantFieldData)
	decodeStmts = append(decodeStmts, checkStr)

	return decodeStmts, nil
}

func (g JavaGenerator) generateDecodeVoidField(field *definition.VoidField, startBits int64) ([]string, error) {
	return []string{""}, nil
}

func (g JavaGenerator) generateDecodeEmbeddedField(field *definition.EmbeddedField, startBits int64) ([]string, error) {
	return nil, nil
}

func (g JavaGenerator) generateDecodeNormalField(field *definition.NormalField, startBits int64) ([]string, error) {
	from := startBits
	to := startBits + field.GetFieldBitSize()
	decodeStmts := []string{}

	switch ty := field.FieldType.(type) {
	case *definition.Struct:
		name := g.generateDecodeStructFieldName(field.FieldName)
		stmts, err := g.generateDecodeNormalFieldImpl(name, ty, field.FieldOptions, from, to)
		if err != nil {
			return nil, err
		}
		decodeStmts = append(decodeStmts, stmts...)

	case *definition.BasicType:
		if ty.GetTypeID().IsBool() {
			tyUint := "byte"
			tempTy := &definition.Uint8
			tempName := g.generateDecodeTempVarName(startBits)

			decodeNormalFieldTempVarDeclData := map[string]any{
				"TyUint":    tyUint,
				"TempName":  tempName,
				"FieldName": g.generateDecodeStructFieldName(field.FieldName),
			}
			declStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldTempVarDecl", nil, decodeNormalFieldTempVarDeclData)
			decodeStmts = append(decodeStmts, declStr)

			stmts, err := g.generateDecodeNormalFieldImpl(tempName, tempTy, field.FieldOptions, from, to)
			if err != nil {
				return nil, err
			}
			decodeStmts = append(decodeStmts, stmts...)

			decodeNormalFieldTempVarAssignBoolCastData := map[string]any{
				"FieldName": g.generateDecodeStructFieldName(field.FieldName),
				"TempName":  tempName,
			}

			assignStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldTempVarAssignBoolCast", nil, decodeNormalFieldTempVarAssignBoolCastData)
			decodeStmts = append(decodeStmts, assignStr)
		} else if ty.GetTypeID().IsFloat() {
			// same as enum
			fieldBitSize := field.GetFieldBitSize()
			fieldSize := (fieldBitSize + 7) / 8
			tySize := util.HighBit(fieldSize)
			tyUint := typeSizeToUintStr(tySize * 8)
			tyUintID := typeSizeMapUint[tySize*8]
			tempTy := definition.GetBasicType(tyUintID)
			tempName := g.generateDecodeTempVarName(startBits)

			decodeNormalFieldTempVarDeclData := map[string]any{
				"TyUint":    tyUint,
				"TempName":  tempName,
				"FieldName": g.generateDecodeStructFieldName(field.FieldName),
			}
			declStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldTempVarDecl", nil, decodeNormalFieldTempVarDeclData)
			decodeStmts = append(decodeStmts, declStr)

			stmts, err := g.generateDecodeNormalFieldImpl(tempName, tempTy, field.FieldOptions, from, to)
			if err != nil {
				return nil, err
			}
			decodeStmts = append(decodeStmts, stmts...)

			decodeNormalFieldTempVarAssignFloatCastData := map[string]any{
				"FieldName": g.generateDecodeStructFieldName(field.FieldName),
				"TempName":  tempName,
				"IsFloat32": ty.GetTypeID() == definition.TypeID_Float32,
			}

			assignStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldTempVarAssignFloatCast", nil, decodeNormalFieldTempVarAssignFloatCastData)
			decodeStmts = append(decodeStmts, assignStr)
		} else {
			// same as struct
			name := g.generateDecodeStructFieldName(field.FieldName)
			stmts, err := g.generateDecodeNormalFieldImpl(name, ty, field.FieldOptions, from, to)
			if err != nil {
				return nil, err
			}
			decodeStmts = append(decodeStmts, stmts...)
		}

	case *definition.Enum:
		fieldBitSize := field.GetFieldBitSize()
		fieldSize := (fieldBitSize + 7) / 8
		tySize := util.HighBit(fieldSize)
		tyUint := typeSizeToUintStr(tySize * 8)
		tyUintID := typeSizeMapUint[tySize*8]
		tempTy := definition.GetBasicType(tyUintID)
		tempName := g.generateDecodeTempVarName(startBits)

		decodeNormalFieldTempVarDeclData := map[string]any{
			"TyUint":    tyUint,
			"TempName":  tempName,
			"FieldName": g.generateDecodeStructFieldName(field.FieldName),
		}
		declStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldTempVarDecl", nil, decodeNormalFieldTempVarDeclData)
		decodeStmts = append(decodeStmts, declStr)

		stmts, err := g.generateDecodeNormalFieldImpl(tempName, tempTy, field.FieldOptions, from, to)
		if err != nil {
			return nil, err
		}
		decodeStmts = append(decodeStmts, stmts...)

		decodeNormalFieldTempVarAssignEnumData := map[string]any{
			"FieldName": g.generateDecodeStructFieldName(field.FieldName),
			"EnumName":  ty.EnumName,
			"TempName":  tempName,
		}

		assignStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldTempVarAssignEnum", nil, decodeNormalFieldTempVarAssignEnumData)
		decodeStmts = append(decodeStmts, assignStr)

	case *definition.Array:
		elemTy := ty.ElementType
		elemTySize := (ty.ElementType.GetTypeBitSize() + 7) / 8
		elemBitSize := field.FieldBitSize / ty.Length
		tyUint := typeSizeToUintStr(elemTySize * 8)
		tyUintID := typeSizeMapUint[elemTySize*8]

		name := g.generateDecodeStructFieldName(field.FieldName)

		// temp variable declaration
		var nameIndex func(int64) string
		switch ty.ElementType.(type) {
		case *definition.Struct:
			nameIndex = func(index int64) string {
				return fmt.Sprintf("%s[%d]", name, index)
			}
		case *definition.BasicType:
			nameIndex = func(index int64) string {
				return fmt.Sprintf("%s[%d]", name, index)
			}

			if ty.ElementType.GetTypeID().IsBool() {
				tyUint := "byte"
				tempTy := &definition.Uint8
				tempName := g.generateDecodeTempVarName(startBits)

				decodeNormalFieldTempVarDeclOnlyData := map[string]any{
					"TyUint":   tyUint,
					"TempName": tempName,
				}
				declStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldTempVarDecl", nil, decodeNormalFieldTempVarDeclOnlyData)
				decodeStmts = append(decodeStmts, declStr)

				nameIndex = func(_ int64) string {
					return tempName
				}

				// change elemTy to temp variable type
				elemTy = tempTy
			}

			// same as enum
			if ty.ElementType.GetTypeID().IsFloat() {
				tempName := g.generateDecodeTempVarName(startBits)

				decodeNormalFieldTempVarDeclOnlyData := map[string]any{
					"TyUint":   tyUint,
					"TempName": tempName,
				}
				declStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldTempVarDecl", nil, decodeNormalFieldTempVarDeclOnlyData)
				decodeStmts = append(decodeStmts, declStr)

				nameIndex = func(_ int64) string {
					return tempName
				}

				// change elemTy to temp variable type
				elemTy = definition.GetBasicType(tyUintID)
			}

		case *definition.Enum:
			tempName := g.generateDecodeTempVarName(startBits)

			decodeNormalFieldTempVarDeclOnly := map[string]any{
				"TyUint":   tyUint,
				"TempName": tempName,
			}
			declStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldTempVarDecl", nil, decodeNormalFieldTempVarDeclOnly)
			decodeStmts = append(decodeStmts, declStr)

			nameIndex = func(_ int64) string {
				return tempName
			}

			// change elemTy to temp variable type
			elemTy = definition.GetBasicType(tyUintID)
		default:
			return nil, fmt.Errorf("internal error: unsupported array element type %T", ty.ElementType)
		}

		for i := int64(0); i < ty.Length; i++ {
			subFrom := from + i*elemBitSize
			subTo := from + (i+1)*elemBitSize
			subName := nameIndex(i)

			stmts, err := g.generateDecodeNormalFieldImpl(subName, elemTy, field.FieldOptions, subFrom, subTo)
			if err != nil {
				return nil, err
			}
			decodeStmts = append(decodeStmts, stmts...)

			switch elemTy := ty.ElementType.(type) {
			case *definition.BasicType:
				if elemTy.GetTypeID().IsBool() {
					decodeNormalFieldTempVarAssignBoolCastData := map[string]any{
						"FieldName": fmt.Sprintf("%s[%d]", name, i),
						"TempName":  subName,
					}
					assignStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldTempVarAssignBoolCast", nil, decodeNormalFieldTempVarAssignBoolCastData)
					decodeStmts = append(decodeStmts, assignStr)
				}
				if elemTy.GetTypeID().IsFloat() {
					decodeNormalFieldTempVarAssignFloatCastData := map[string]any{
						"TempName":  subName,
						"FieldName": fmt.Sprintf("%s[%d]", name, i),
						"IsFloat32": elemTy.GetTypeID() == definition.TypeID_Float32,
					}
					assignStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldTempVarAssignFloatCast", nil, decodeNormalFieldTempVarAssignFloatCastData)
					decodeStmts = append(decodeStmts, assignStr)
				}
			case *definition.Enum:
				decodeNormalFieldTempVarAssignEnumData := map[string]any{
					"TempName":  subName,
					"EnumName":  elemTy.EnumName,
					"FieldName": fmt.Sprintf("%s[%d]", name, i),
				}
				assignStr := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldTempVarAssignEnum", nil, decodeNormalFieldTempVarAssignEnumData)
				decodeStmts = append(decodeStmts, assignStr)
			default:
			}
		}

	default:
		return nil, fmt.Errorf("internal error: unknown field kind %T", ty)
	}

	return decodeStmts, nil
}

func (g JavaGenerator) generateDecodeNormalFieldImpl(fieldNameStr string, fieldType definition.Type, fieldOptions *util.OrderedMap[string, *definition.Option], from, to int64) ([]string, error) {
	decodeStmts := []string{}
	fieldBitSize := to - from
	fieldTypeStr, err := g.GenerateType(fieldType)
	if err != nil {
		panic(fmt.Errorf("internal error: %s", err))
	}

	dataDataFunc := func(i int64) string {
		return fmt.Sprintf("data[start + %d]", i)
	}

	switch ty := fieldType.(type) {
	case *definition.Struct:
		decodeNormalFieldStructData := map[string]any{
			"FieldName": fieldNameStr,
			"FromByte":  from / 8,
		}

		stmt := util.ExecuteTemplate(fieldDecoderTemplate, "decodeNormalFieldStruct", nil, decodeNormalFieldStructData)
		decodeStmts = append(decodeStmts, stmt)

	case *definition.Enum:
		panic("unreachable, enum field should be handled in generateDecodeNormalField")

	case *definition.BasicType:
		// little endian as default
		shiftCalc := func(i int64) string {
			return g.generateDec(i * 8)
		}
		if gen.MatchOption(fieldOptions, "order", "big") {
			// big endian
			shiftCalc = func(i int64) string {
				return g.generateDec(max(0, fieldBitSize-8*(i+1)))
			}
		}

		if ty.GetTypeBitSize() > 32 {
			oldDataDataFunc := dataDataFunc
			dataDataFunc = func(i int64) string {
				expr := &definition.CastExpr{
					ToType: &definition.Uint64,
					Expr1: &definition.RawExpr{
						Expr: oldDataDataFunc(i),
					},
				}
				exprStr, err := g.GenerateExpr(expr, "")
				if err != nil {
					panic(fmt.Errorf("internal error: %s", err))
				}
				return exprStr
			}
		}

		fieldProcessor := func(expr string, i int64) string {
			// operator is '=' if is filling the first bit, otherwise is '|='
			operator := ""
			if i == 0 {
				operator = exprOpToString[definition.ExprOp_ASSIGN] // "="
			} else {
				operator = exprOpToString[definition.ExprOp_BOR] + exprOpToString[definition.ExprOp_ASSIGN] // "|="
			}

			// exprExp = expr << 8*i or expr << max(0, fieldBitSize-8*(i+1))
			exprExp := &definition.BinopExpr{
				Op: definition.ExprOp_SHL,
				Expr1: &definition.RawExpr{
					Expr: expr,
				},
				Expr2: &definition.RawExpr{
					Expr: shiftCalc(i),
				},
			}

			exprExpStr, err := g.GenerateExpr(exprExp, "")
			if err != nil {
				panic(fmt.Errorf("internal error: %s", err))
			}

			decodeImplData := map[string]any{
				"FieldType": fieldTypeStr,
				"FieldName": fieldNameStr,
				"Operator":  operator,
				"Expr":      exprExpStr,
			}

			return util.ExecuteTemplate(fieldDecoderTemplate, "decodeImpl", nil, decodeImplData)
		}

		decodeStmts = append(decodeStmts, g.generateDecodeImpl(from, to, fieldProcessor, dataDataFunc)...)

		// set sign bit
		if ty.GetTypeID().IsInt() {
			originFromBitSize := fieldBitSize

			switch g.GenCtx.GenOptions.SignExtMethod {
			case gen.SignExtMethodDefault, gen.SignExtMethodShift, gen.SignExtMethodArith:
				signMask := int64(1) << (originFromBitSize - 1)
				signMaskStr := g.generateHex(signMask)
				signExtendData := map[string]any{
					"FieldType": fieldTypeStr,
					"FieldName": fieldNameStr,
					"SignMask":  signMaskStr,
				}

				stmt := util.ExecuteTemplate(fieldDecoderTemplate, "signExtendArith", nil, signExtendData)
				decodeStmts = append(decodeStmts, stmt)

			default:
				panic("unreachable, unknown sign extension method")
			}
		}

	case *definition.Array:
		panic("unreachable, array field should be handled in generateDecodeNormalField")

	default:
		return nil, fmt.Errorf("internal error: unknown field kind %T", ty)
	}

	return decodeStmts, nil
}

// generateDecodeImpl generates decode implementation from 'from' bit to 'to' bit and align to 8 bits
// from: start bit position of encoded data
// to: end bit position of encoded data
// from is inclusive, to is exclusive, i.e. [from, to)
//
// e.g. from = 3, to = 19
//
//	exprOfExtract1stByteFromEncodedData = (((((uint8_t*)data)[0] & 0b11111000) >> 3) | ((((uint8_t*)data)[1] & 0b00000111) << 5))
//	exprOfExtract2ndByteFromEncodedData = (((((uint8_t*)data)[1] & 0b11111000) >> 3) | ((((uint8_t*)data)[2] & 0b00000111) << 5))
//
// fieldData: a function callback to generate expression of decoding x-th byte data (x is the byte index)
//
// e.g. little endian
//
//	fieldProcessor(exprOfExtract1stByteFromEncodedData, 0) -> (*(uint32_t*)(&(structPtr->intField))) = (exprOfExtract1stByteFromEncodedData << 0)
//	fieldProcessor(exprOfExtract2ndByteFromEncodedData, 1) -> (*(uint32_t*)(&(structPtr->intField))) |= (exprOfExtract2ndByteFromEncodedData << 8)
//	fieldProcessor(exprOfExtract3rdByteFromEncodedData, 2) -> (*(uint32_t*)(&(structPtr->intField))) |= (exprOfExtract3rdByteFromEncodedData << 16)
//	fieldProcessor(exprOfExtract4thByteFromEncodedData, 3) -> (*(uint32_t*)(&(structPtr->intField))) |= (exprOfExtract4thByteFromEncodedData << 24)
func (g JavaGenerator) generateDecodeImpl(from, to int64, fieldProcessor func(string, int64) string, dataData func(int64) string) []string {
	decodeStmts := []string{}
	// generate decode implentation from 'from' bit to 'to' bit per 8 bits
	// e.g. from = 3, to = 19 -> loop 2 times: 3-10, 11-19 (not aligned to 8 bits!!!)
	for i := from; i < to; i += 8 {

		// we use 'from' and 'to' to denote the bit position in encoded data
		begin := i
		end := min(to, i+8)

		var expr definition.Expr

		// separator to check if is aligned to 8 bits
		sep := min(end, (begin+8)&(^7))
		// first half
		// e.g. begin = 3, end = 10
		//      sep = 8, fieldMask = 0b11111000, shiftRight = 3
		if begin < sep { // always true, just for beauty
			fieldMask := ((1 << (((sep - 1) & 7) + 1)) - 1) & (^((1 << (begin & 7)) - 1))
			shiftRight := begin % 8
			// expr = (((data[begin/8] & fieldMask) >> shiftRight)
			expr = &definition.BinopExpr{
				Op: definition.ExprOp_SHR,
				Expr1: &definition.BinopExpr{
					Op: definition.ExprOp_BAND,
					Expr1: &definition.RawExpr{
						Expr: dataData(begin / 8),
					},
					Expr2: &definition.RawExpr{
						Expr: g.generateBin(fieldMask),
					},
				},
				Expr2: &definition.RawExpr{
					Expr: fmt.Sprintf("%d", shiftRight),
				},
			}
		}
		// second half
		// e.g. begin = 8, end = 10
		//      sep = 8, fieldMask = 0b00000111, shiftLeft = 5
		if sep < end {
			fieldMask := ((1 << (((end - 1) & 7) + 1)) - 1) & (^((1 << (sep & 7)) - 1))
			shiftLeft := 8 - end%8
			// expr = expr | (((data[sep/8] & fieldMask) << shiftLeft)
			expr = &definition.BinopExpr{
				Op:    definition.ExprOp_BOR,
				Expr1: expr,
				Expr2: &definition.BinopExpr{
					Op: definition.ExprOp_SHL,
					Expr1: &definition.BinopExpr{
						Op: definition.ExprOp_BAND,
						Expr1: &definition.RawExpr{
							Expr: dataData(sep / 8),
						},
						Expr2: &definition.RawExpr{
							Expr: g.generateBin(fieldMask),
						},
					},
					Expr2: &definition.RawExpr{
						Expr: fmt.Sprintf("%d", shiftLeft),
					},
				},
			}
		}

		// generate decode expression
		exprStr, err := g.GenerateExpr(expr, "")
		if err != nil {
			panic(fmt.Errorf("internal error: %s", err))
		}

		// generate decode statement
		decodeStmt := fieldProcessor(exprStr, (i-from)/8)
		decodeStmts = append(decodeStmts, decodeStmt)
	}
	return decodeStmts
}

// ==================== GenerateExpr ====================

func (g JavaGenerator) GenerateExpr(expr definition.Expr, valueStr string) (string, error) {
	generator := NewJavaExprGenerator(g.GenerateType, valueStr)
	return g.AcceptExpr(expr, generator)
}

// ==================== Expr Generator ====================

type JavaExprGenerator struct {
	*gen.GenExprDispatcher
	GenType          func(definition.Type) (string, error)
	ValueStr         string
	LiteralGenerator gen.LiteralGeneratorImpl // optional
}

func NewJavaExprGenerator(genType func(definition.Type) (string, error), valueStr string) *JavaExprGenerator {
	generator := &JavaExprGenerator{
		GenExprDispatcher: nil,
		GenType:           genType,
		ValueStr:          valueStr,
	}
	generator.GenExprDispatcher = gen.NewGenExprDispatcher(generator)
	return generator
}

func (g JavaExprGenerator) GenerateExpr(expr definition.Expr) (string, error) {
	return g.AcceptExpr(expr)
}

var exprOpToString = map[definition.ExprOp]string{
	definition.ExprOp_ADD:    "+",
	definition.ExprOp_SUB:    "-",
	definition.ExprOp_MUL:    "*",
	definition.ExprOp_DIV:    "/",
	definition.ExprOp_MOD:    "%",
	definition.ExprOp_POW:    "**",
	definition.ExprOp_SHL:    "<<",
	definition.ExprOp_SHR:    ">>",
	definition.ExprOp_LT:     "<",
	definition.ExprOp_LE:     "<=",
	definition.ExprOp_GT:     ">",
	definition.ExprOp_GE:     ">=",
	definition.ExprOp_EQ:     "==",
	definition.ExprOp_NE:     "!=",
	definition.ExprOp_BAND:   "&",
	definition.ExprOp_BXOR:   "^",
	definition.ExprOp_BOR:    "|",
	definition.ExprOp_AND:    "&&",
	definition.ExprOp_OR:     "||",
	definition.ExprOp_NOT:    "!",
	definition.ExprOp_BNOT:   "~",
	definition.ExprOp_ASSIGN: "=",
}

func (g JavaExprGenerator) GenerateUnopExpr(expr *definition.UnopExpr) (string, error) {
	opStr, ok := exprOpToString[expr.Op]
	if !ok {
		return "", fmt.Errorf("unknown unop expr op: %s", expr.Op.String())
	}
	expr1, err := g.GenerateExpr(expr.Expr1)
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("(%s%s)", opStr, expr1), nil
}

func (g JavaExprGenerator) GenerateBinopExpr(expr *definition.BinopExpr) (string, error) {
	switch expr.Op {
	case definition.ExprOp_POW:
		expr1, err := g.GenerateExpr(expr.Expr1)
		if err != nil {
			return "", err
		}
		expr2, err := g.GenerateExpr(expr.Expr2)
		if err != nil {
			return "", err
		}
		return fmt.Sprintf("Math.pow(%s, %s)", expr1, expr2), nil
	default:
		opStr, ok := exprOpToString[expr.Op]
		if !ok {
			return "", fmt.Errorf("unknown binop expr op: %s", expr.Op.String())
		}
		expr1, err := g.GenerateExpr(expr.Expr1)
		if err != nil {
			return "", err
		}
		expr2, err := g.GenerateExpr(expr.Expr2)
		if err != nil {
			return "", err
		}
		return fmt.Sprintf("(%s %s %s)", expr1, opStr, expr2), nil
	}
}

func (g JavaExprGenerator) GenerateCastExpr(expr *definition.CastExpr) (string, error) {
	expr1, err := g.GenerateExpr(expr.Expr1)
	if err != nil {
		return "", err
	}
	ty, err := g.GenType(expr.ToType)
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("(%s)%s", ty, expr1), nil
}

func (g JavaExprGenerator) GenerateConstantExpr(expr *definition.ConstantExpr) (string, error) {
	generator := g.LiteralGenerator
	if generator == nil {
		generator = NewJavaLiteralGenerator()
	}
	return g.AcceptLiteral(expr.ConstantValue, generator)
}

func (g JavaExprGenerator) GenerateTenaryExpr(expr *definition.TenaryExpr) (string, error) {
	cond, err := g.GenerateExpr(expr.Cond)
	if err != nil {
		return "", err
	}
	expr1, err := g.GenerateExpr(expr.Expr1)
	if err != nil {
		return "", err
	}
	expr2, err := g.GenerateExpr(expr.Expr2)
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("(%s ? %s : %s)", cond, expr1, expr2), nil
}

func (g JavaExprGenerator) GenerateValueExpr(expr *definition.ValueExpr) (string, error) {
	return g.ValueStr, nil
}

func (g JavaExprGenerator) GenerateRawExpr(expr *definition.RawExpr) (string, error) {
	return expr.Expr, nil
}

// ==================== Literal Generator ====================

type JavaLiteralGenerator struct {
	*gen.GenLiteralDispatcher
}

func NewJavaLiteralGenerator() *JavaLiteralGenerator {
	generator := &JavaLiteralGenerator{
		GenLiteralDispatcher: nil,
	}
	generator.GenLiteralDispatcher = gen.NewGenLiteralDispatcher(generator)
	return generator
}

func (g JavaLiteralGenerator) GenerateLiteral(literal definition.Literal) (string, error) {
	return g.AcceptLiteral(literal)
}

func (g JavaLiteralGenerator) GenerateBoolLiteral(literal *definition.BoolLiteral) (string, error) {
	return fmt.Sprintf("%t", literal.BoolValue), nil
}

func (g JavaLiteralGenerator) GenerateIntLiteral(literal *definition.IntLiteral) (string, error) {
	if literal.IntValue > math.MaxInt32 || literal.IntValue < math.MinInt32 {
		return fmt.Sprintf("%dL", literal.IntValue), nil
	}
	return fmt.Sprintf("%d", literal.IntValue), nil
}

func (g JavaLiteralGenerator) GenerateFloatLiteral(literal *definition.FloatLiteral) (string, error) {
	return fmt.Sprintf("%f", literal.FloatValue), nil
}

func (g JavaLiteralGenerator) GenerateStringLiteral(literal *definition.StringLiteral) (string, error) {
	return fmt.Sprintf(`"%s"`, literal.StringValue), nil
}
